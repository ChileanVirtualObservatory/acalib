from astropy.io import fits
from astropy import log
import astropy.units as u
from astropy.wcs import wcs

import adata as dt
import atable as at
import numpy as np

class AContainer:

	def __init__(self):
		self.primary = None
		self.adata = []
		self.atable = []


	def _create_table(self,data, meta):
		pass

	def _create_cube(self,data,meta):
	   """ data = numpy data
	       meta = header of fits
	   """
	   mask=np.isnan(data)
	   try:
	     bscale=meta['BSCALE']
	   except KeyError:
	     bscale=1.0
	   try:
	     bzero=meta['BZERO']
	   except KeyError:
	     bzero=0.0
	   try:
	     bsu=meta['BUNIT']
	     bsu=bsu.lower()
	     bsu=bsu.replace("jy","Jy")
	     bunit=u.Unit(bsu,format="fits")
	   except KeyError:
	     bunit=u.Unit("u.Jy/u.beam")
	   # Hack to correct wrong uppercased units generated by CASA

	   if len(data.shape) != 4:
	       log.error("Only 4D FITS (RA-DEC-FREQ-STOKES) are allowed (like CASA-generated ones). Talk to the core team to include your datatype.")
	       raise TypeError

	   # Create astropy units
	   # Put data in physically-meaninful values, and remove stokes
	   # TODO: Stokes is removed by summing (is this correct? maybe is averaging?)
	   data=data.sum(axis=0)*bscale+bzero
	   mywcs=wcs.WCS(meta)
	   mywcs=mywcs.dropaxis(3)
	   return dt.AData(data,mywcs,meta,bunit)

        def save_to_fits(self,filepath):
              #if self.adata == []:
              #    primary=self.atable[0]
              #    self.atable.remove(primary)
              #else:
              #    primary=self.adata[0]
              #    self.adata.remove(primary)
              # TODO. include meta!
              phdu=fits.PrimaryHDU(data=self.primary.data.data,meta=self.primary.meta)
              nlist=[phdu]
              for elm in self.adata:
                  nlist.append(fits.ImageHDU(data=elm.data,meta=elm.meta))
              for elm in self.atable:
                  nlist.append(fits.BinTableHDU.from_columns(np.array(elm)))
              hdulist = fits.HDUList(nlist)
              print hdulist
              hdulist.writeto(filepath)

	def load_from_fits(self, filePath):
		hdulist = fits.open(filePath)
		for counter,hdu in enumerate(hdulist):
			if isinstance(hdu,fits.PrimaryHDU) or isinstance(hdu,fits.ImageHDU):
				log.info("Processing HDU "+str(counter)+" (Image)")
				try:
					ndd=self._create_cube(hdu.data,hdu.header)
					if isinstance(hdu,fits.PrimaryHDU):
						self.primary = ndd
					self.adata.append(ndd)
				except TypeError:
					log.info(str(counter)+" (Image) wasn't an Image")
				
			if isinstance(hdu, fits.BinTableHDU):
				table = at.ATable(hdu.data)
				self.atable.append(table)
		if self.primary is None:
			if len(self.atable)>0:
				self.primary = self.atable[0]
			else:
				self.primary = self.adata[0]
			
