## container.py
class Container:
    def load_fits(self,path): 
    def save_fits(self,path): 
def load_fits(path):

# utils 
def fix_mask(data,mask):
def fix_limits(data,vect):
def slab(data,lower=None,upper=None):
def matching_slabs(data,flux,lower,upper):
def world_window_to_index(data,wcs,center,window):

## models (use models base from astropy)
def gaussian_function(mu,P,feat,peak):
def gaussflux_from_world_window(data,wcs,mu,P,peak,cutoff):
def create_mould(P,delta):

# Dimensionality reduction
def spectra(data,wcs=None,mask=None,unit=None,position=None,aperture=None):
def integrate(data, wcs=None, mask=None, unit=None, axis=(0)):
def vel_stacking(data,data_slice, wcs=None, mask=None,uncertainty=None, meta=None, unit=None):
def cube_spectra(data,samples, random_state = None):

### Getters
def get_velocities(data,wcs=None,fqi=None,restfrq=None):
def axes_ranges(data,wcs=None,lower=None,upper=None):
def axis_range(data,wcs,axis):
def get_mesh(data,lower=None,upper=None):
def world_features(data,wcs,lower=None,upper=None):
def to_features(data,lower=None,upper=None):

# Statistics
def rms(data,mask=None):
def snr_estimation(data,mask=None,noise=None,points=1000,full_output=False):
def moment(data,order,wcs=None,mask=None,unit=None,restfrq=None):
def moment0(data,wcs=None,mask=None,unit=None,restfrq=None):
def moment1(data,wcs=None,mask=None,unit=None,restfrq=None):
def moment2(data,wcs=None,mask=None,unit=None,restfrq=None):
def measure_shape(data, labeled_images, min_freq = None, max_freq = None, wcs=None):

### OO interface also


# Flux Operations
def standarize(data,wcs=None,unit=None,mask=None,meta=None):
def unstandarize(data, y_min,y_fact):
def add_flux(data,flux,lower=None,upper=None):
def denoise(data,wcs=None,mask=None,unit=None,threshold=0.0):

# Shape operations 
def cut(data,wcs=None,mask=None,unit=None,lower=None,upper=None):
def scale(inputDir, majorAxisTemplate):
def rotate(data, templateAngle):
def rotate(data,angle):
def cropAndAlign(data,angles):




