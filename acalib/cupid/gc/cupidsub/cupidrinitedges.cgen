#include "sae_par.h"
#include "cupid.h"
#include <math.h>

int *CGEN_FUNCTION(cupidRInitEdges)( CGEN_TYPE *array, int nel, int ndim,
                                     int dims[ 3 ], int skip[ 3 ], int minpix,
                                     double thresh, double noise, double rms,
                                     double flatslope, int *peakval,
                                     int *status ){
/*
*+
*  Name:
*     cupidRInitEdges<X>

*  Purpose:
*     Create an initial estimate of the position of the clump edges.

*  Language:
*     Starlink C

*  Synopsis:
*     int *cupidRInitEdges<X>( CGEN_TYPE *array, int nel, int ndim,
*                              int dims[ 3 ], int skip[ 3 ], int minpix,
*                              double thresh, double noise, double rms,
*                              double flatslope, int *peakval,
*                              int *status )

*  Description:
*     This function creates a mask array which has the same shape and
*     size as the data array, and which identifies edge pixels, peak
*     pixels and other pixels.
*
*     This initial estimate of the edges is formed by scanning the data
*     array along a set of parallel 1D lines of various orientations, and
*     looking for peaks in these 1D lines. Peaks are then traced outwards
*     along the line, away from the peak centre, until a pair of significant
*     minima is found in the peak profile, one on each side of the peak
*     centre or the data value drops below a threshold value. The location
*     of these minima are then flagged in the returned mask array (as is
*     the peak position).

*  Parameters:
*     array
*        The array containing the data to be scanned. The elements should
*        be ordered according to Fortran order (first axis varying most
*        rapidly).
*     nel
*        The number of elements in "array".
*     ndim
*        The number of significant pixel axes.
*     dims
*        The number of pixels on each pixel axis of the array.
*     skip
*        The increment in 1D vector index required to move a distance of 1
*        pixel along each axis. This allows conversion between indexing
*        the array using a single 1D vector index and using nD coords. This
*        array should have 3 elements even if "ndim" is less than 3, and
*        the extra elements should be filled with zero's.
*     minpix
*        The minimum number of pixels within a 1D line of data (including the
*        edge pixels) which must be spanned by a peak in order for its edges
*        to be marked in the returned mask.
*     thresh
*        The smallest significant peak data value. The edges of peaks
*        which are below this limit are not included in the returned mask.
*     noise
*        The data value below which pixels are considered to be in the
*        noise. A peak is considered to end when the peak value dips
*        below this value.
*     rms
*        The RMS noise in the data
*     peakval
*        Pointer to a location at which to return the minimum mask value used
*        to represent pixels which were found to be a peak in every scan
*        direction. Note, it is possible that peak values may be marked
*        with a value larger than "*peakval" since it is possible for a
*        given peak to be scanned twice if it lies at the joint between two
*        cube faces.
*     flatslope
*        The minimum significant slope along a peak, in units of change
*        in data value per pixel.
*     status
*        Pointer to the inherited status value.

*  Returned Value:
*     A pointer to a dynamically allocated array holding the returned mask.
*     Edge pixels are marked by the value CUPID__KEDGE in this array. Pixels
*     which are peaks in cross sections taken in all directions are marked by
*     a value greater than or equal to the value returned in *peakval. That
*     is, if a peak is located while scanning in one direction, but that same
*     pixel is not a peak when scanning in some other direction, then the
*     pixel is not flagged as a peak in the returned array. All other pixels
*     are set to some other value (not necessarily CUPID__KBACK since peaks
*     found in some subset of the scans will have other values which are
*     neither CUPID_KBACK nor "*peakval"). The memory should be freed (using
*     astFree) when no longer needed. A NULL pointer is returned if an
*     error occurs.

*  Notes:
*     - This function can be invoked using the generic cupidRInitEdges macro
*     defined in cupid.h. This macro has the same parameter list as
*     cupidRInitEdges<X> except that an extra parameter is added to the start
*     of the parameter list indicating the data type of the specific
*     cupidRInitEdges... function to be invoked. This extra parameter should
*     be an integer and should be one of CUPID__DOUBLE, CUPID__FLOAT, etc.

*  Copyright:
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     DSB: David S. Berry
*     {enter_new_authors_here}

*  History:
*     17-JAN-2006 (DSB):
*        Original version.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables: */

   double *work1;  /* Work array */
   int *ret;       /* Pointer to returned mask array */
   int *work2;     /* Work array */
   int axis;       /* The axis which is perpendicular to the current face */
   int i;          /* The index into the mask array */
   int iv;         /* The count of scan line vectors checked so far */
   int ivlim;      /* Max count of scan line vectors to be checked */
   int lbnd;       /* Check the lower axis bound face? Upper otherwise. */
   int wsize;      /* Length of work arrays */
   int xvec[ 3 ];  /* The 3D GRID vector along the scan lines */
   int yhi;        /* Highest value for axis 2 comp of line vector */
   int ylo;        /* Lowest value for axis 2 comp of line vector */
   int zhi;        /* Highest value for axis 3 comp of line vector */
   int zlo;        /* Lowest value for axis 3 comp of line vector */
   int nl;         /* Number of lines scanned. */

/* Initialise */
   ret = NULL;

/* Abort if an error has already occurred. */
   if( *status != SAI__OK ) return ret;

/* Allocate work arrays. These need to be at least as long as the
   diagonal of the data cube. */
   wsize = sqrtf( dims[ 0 ]*dims[ 0 ] +
                  dims[ 1 ]*dims[ 1 ] +
                  dims[ 2 ]*dims[ 2 ] );
   work1 = astMalloc( sizeof( double )*wsize );
   work2 = astMalloc( sizeof( int )*wsize );

/* Allocate memory for the returned mask array. */
   ret = astMalloc( sizeof( int )*nel );

/* Check for success. */
   if( ret ) {

/* Initialise the mask to hold CUPID__KBACK. */
      for( i = 0; i < nel; i++ ) ret[ i ] = CUPID__KBACK;

/* Set up the loop limits for the axes which may not be present (axes 2
   and 3). */
      ivlim = 1;
      ylo = 0;
      yhi = 0;
      zlo = 0;
      zhi = 0;

      if( ndim > 1 ){
         ivlim = 4;
         ylo = -1;
         yhi = 1;

         if( ndim > 2 ) {
            ivlim = 13;
            zlo = -1;
            zhi = 1;
         }
      }

/* Consider all possible scan line directions. We only need to check the
   first half of these directions since the others will be parallel (e.g.
   the first vector and the last vector will be parallel, but in opposite
   directions so we do not do the last vector since the results of
   scanning in opposite direction will be the same. */
      iv = 0;
      for( xvec[ 2 ] = zlo; xvec[ 2 ] <= zhi; xvec[ 2 ]++ ){
         for( xvec[ 1 ] = ylo; xvec[ 1 ] <= yhi; xvec[ 1 ]++ ){
            for( xvec[ 0 ] = -1; xvec[ 0 ] <= 1; xvec[ 0 ]++ ){
               if( iv++ < ivlim ) {

/* Consider lines starting on faces which are perpendicular to each pixel
   axis in turn. */
                  for( axis = 0; axis < 3; axis++ ) {

/* First scan the data cube using lines which originate on the face
   corresponding to the upper axis limit, then consider those which
   originate on the face corresponding to the lower axis limit. */
                     for( lbnd = 0; lbnd <= 1; lbnd++ ) {

/* Scan the data cube using lines which start on the face of the cube
   specified by "axis" and "lbnd", and which extend in the direction
   given by "xvec". Edges of any peaks found along these scan lines are
   marked by 1's in the mask array. */
                        nl = CGEN_FUNCTION(cupidRCheckFace)( array, nel,
                                                         axis, lbnd, dims, skip,
                                                        xvec, work1, work2,
                                                        ret, minpix, thresh,
                                                        noise, rms, flatslope, status );
                     }
                  }
               }
            }
         }
      }

/* Work out the minimum mask value used to represent each pixel which was
   found to be a peak in every scan. It is possible for a peak to be scanned
   twice using the same scan-line vector. E.g. when scanning a 2D image
   diagonally, a peak which lies on the diagonal of the image may be scanned
   by lines originating from both faces on either sideof the diagonal. */
      *peakval = CUPID__KBACK + ivlim*CUPID__KPEAK;
   }

/* Free work arrays. */
   work1 = astFree( work1 );
   work2 = astFree( work2 );

/* Return the mask array pointer. */
   return ret;

}
