/* -*- C -*- */

#include "sae_par.h"
#include "cupid.h"
#include "ast.h"
#include "mers.h"

CupidPixelSet **CGEN_FUNCTION(cupidCFScan)( CGEN_TYPE *ipd, int *ipa, int nel,
                                            int ndim, int dims[3], int skip[3],
                                            int perspectrum, CupidPixelSet **clumps,
                                            int idl, double clevel, int *index,
                                            int naxis, int newok,
                                            int *slbnd, double *maxpd,
                                            int *status ){
/*
*+
*  Name:
*     cupidCFScan<X>

*  Purpose:
*     Scan the data array for clumps at a new contour level.

*  Language:
*     Starlink C

*  Synopsis:
*     CupidPixelSet **cupidCFScan<X>( CGEN_TYPE *ipd, int *ipa, int nel,
*                                     int ndim, int dims[3], int skip[3],
*                                     int perspectrum, CupidPixelSet **clumps,
*                                     int idl, double clevel, int *index,
*                                     int naxis, int newok,
*                                     int *slbnd, double *maxpd, int *status )

*  Description:
*     This function scans the data array for pixels at or above the
*     specified contour level which have not already been assigned to a
*     clump. Such pixels are either added to one of the existing clumps
*     supplied in "clumps" or are used to create a new clump. An array of
*     PixelSets is returned which contains the supplied clumps (suitably
*     extended to contain the pixels at the new contour level) and any new
*     clumps found at this contour level.

*  Parameters:
*     ipd
*        Pointer to the start of the supplied data array.
*     ipa
*        Pointer to the start of the array holding the integer index
*        (if any) associated with each pixel in the data array. This
*        shows which clump each pixel belongs to (each clump is identified
*        by a unique integer index). The array should be the same shape and
*        size as the data array. Pixels which have not yet been assigned
*        to a clump are marked with the integer value CUPID__CFNULL.
*     nel
*        The total number of elements in the data array.
*     ndim
*        The number of pixel axes in the data array.
*     dims
*        The number of pixels on each pixel axis of the data array. This
*        array should have 3 elements even if "ndim" is less than 3, and
*        the extra elements should be filled with 1's.
*     skip
*        The increment in 1D vector index required to move a distance of 1
*        pixel along each axis. This allows conversion between indexing
*        the array using a single 1D vector index and using nD coords. This
*        array should have 3 elements even if "ndim" is less than 3, and
*        the extra elements should be filled with zero's.
*     perspectrum
*        If non-zero, then each spectrum is processed independently of its
*        neighbours. A clump that extends across several spectra will be
*        split into multiple clumps, each restricted to a single spectrum.
*        The non-zero value supplied should be the 1-based axis index of
*        the spectral pixel axis. Should be supplied as zero if "ndim" is
*        not 3.
*     clumps
*        An array of pointers, each locating a PixelSet structure. The
*        number of pointers in the array is given by the supplied value
*        of "*index". Each PixelSet describes one clump found at a higher
*        contour level. Ignored (and consequently may be NULL) if "*index"
*        is zero. The index within this array at which a pointer to a
*        particular PixelSet is stored should equal the index value
*        stored within the PixelSet structure (this makes it easy and
*        fast to get a pointer to a PixelSet with a particular index value).
*        Elements of the array which are not used should hold NULL.
*     idl
*        If non-zero, the IDL implementation of ClumpFind will be
*        emulated rather than the algorithm described in the original
*        Williams et al ApJ paper.
*     clevel
*        The data value at which to scan the supplied data array.
*     index
*        Pointer to an int holding the next free PixelSet index value
*        (or in other words, the number of PixelSets defined at higher
*        contour levels). The index value is the value stored in the "ipa"
*        array to identify all the pixels within a set of contiguous pixels.
*        The same value is stored within the PixelSet structure describing
*        the set of contiguous pixels. Updated on exit to take account of any
*        newly issued index values. The supplied value also specifies the
*        length of the supplied "clumps" array, and the returned value
*        specifies the length of the array returned as the function value.
*     naxis
*        Determines which adjoining pixels are considered to be "neighbours"
*        of a specified central pixel. Should be in the range 1 to "ndim".
*        For a pixel to be considered to be a neighbour of another pixel,
*        the two pixels must be no more than 1 pixel away along no more than
*        "naxis" axes. The supplied value is ignored and a value of 1 is
*        used if "perspectrum" is non-zero.
*     newok
*        Can new clumps be started at this contour level?
*     slbnd
*        Pointer to an array holding the lower pixel index bound of the
*        data array on each axis.
*     maxpd
*        Pointer to a double in which to return the largest data value
*        which has not yet been incorporated into a clump.
*     status
*        Pointer to the inherited status value.

*  Returned Value:
*     A pointer to a possibly new array in which each element is a
*     pointer to a PixelSet structure (this may be the same as the
*     supplied "clumps" pointer). The number of pointers in the
*     array is returned in "*index". These are the PixelSets defining the
*     clumps at the given contour level. All the supplied clump pointers
*     will be present in the returned array, but additional new pointers
*     may be added to describe new clumps which appear at this contour level.
*     The original clump PixelSets will usually have been extended to
*     include the extra pixels found at this contour level. The index within
*     this array at which a pointer to a particular PixelSet is stored
*     will equal the index value stored within the PixelSet structure.
*     Elements of the array which are not used are set to NULL.

*  Notes:
*     - If a new array of PixelSets is created and returned, the original
*     array given by the "clumps" parameter will be freed.
*     - This function can be invoked using the generic cupidCFScan macro
*     defined in cupid.h. This macro has the same parameter list as
*     cupidCFScan<X> except that an extra parameter is added to the start
*     of the parameter list indicating the data type of the specific
*     cupidCFScan... function to be invoked. This extra parameter should
*     be an integer and should be one of CUPID__DOUBLE, CUPID__FLOAT, etc.

*  Copyright:
*     Copyright (C) 2005 Particle Physics & Astronomy Research Council.
*     Copyright (C) 2007, 2009 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     DSB: David S. Berry
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     24-NOV-2005 (DSB):
*        Original version.
*     17-SEP-2007 (DSB):
*        Added "perspectrum" parameter.
*     14-JAN-2009 (TIMJ):
*        Use MERS for message filtering.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables: */
   CGEN_TYPE *pd;        /* Pointer to next data pixel */
   CupidPixelSet **ret;  /* The returned pointer */
   CupidPixelSet *ops;   /* Pointer to neighbouring PixelSet */
   CupidPixelSet *ps;    /* Pointer to new PixelSet */
   int *new_indices;     /* Array of new clump index values */
   int *pa;              /* Pointer to next index value */
   int edge;             /* Pixel at upper or lower bound on any axis? */
   int hindex;           /* Next available index on entry */
   int i1[27];           /* List of adjoining PixelSet indices at this level */
   int i;                /* Loop count */
   int ii;               /* Loop count */
   int il1;              /* Lowest index of adjoining PixelSets at this level */
   int il2;              /* Index of closest adjoining PixelSet at higher level */
   int ix;               /* GRID index on 1st axis */
   int iy;               /* GRID index on 2nd axis */
   int iz;               /* GRID index on 3rd axis */
   int j;                /* Loop count */
   int new_index;        /* New index for a clump */
   int n1;               /* No. of adjoining PixelSets at this level */
   int n2;               /* No. of adjoining PixelSets at higher levels */
   int new_clumps;       /* Number of new clumps found at this level */
   int total_pop;        /* Number of pixels checked at this level */
   int x[3];             /* GRID coords of current pixel */
   int yedge;            /* Pixel at upper or lower bound on 2nd axis? */
   int zedge;            /* Pixel at upper or lower bound on 3rd axis? */

/* Initialise */
   ret = clumps;

/* Abort if an error has already occurred. */
   if( *status != SAI__OK ) return ret;

/* Note the next available index value. This value is saved now so that
   we can differentiate later between PixelSets created at the current
   contour level and those created at higher contour levels (PixelSets
   created at higher contour levels will have indices less than hindex). */
   hindex = *index;

/* Scan the data array for good pixels which are above (or at) the supplied
   contour level and have not yet been assigned to a PixelSet (i.e. have a
   null index in the "ipa" array). Keep a check on whether the pixel is
   an edge pixel or not. */
   *maxpd = VAL__MIND;
   pd = ipd - 1;
   pa = ipa - 1;
   i = -1;

   for( iz = 1; iz <= dims[ 2 ]; iz++ ) {
      x[ 2 ] = iz;
      zedge = ( ndim > 2 && ( iz == 1 || iz == dims[ 2 ] ) );

      for( iy = 1; iy <= dims[ 1 ]; iy++ ) {
         x[ 1 ] = iy;
         yedge = ( ndim > 1 && ( iy == 1 || iy == dims[ 1 ] ) );

         for( ix = 1; ix <= dims[ 0 ]; ix++ ) {
            x[ 0 ] = ix;
            edge = yedge || zedge || ( ix == 1 || ix == dims[ 0 ] );

            i++;
            pd++;
            pa++;

            if( *pa == CUPID__CFNULL ) {
               if( *pd != CGEN_BAD ) {
                  if( *pd >= clevel ) {

/* When such a pixel is found, have a look at its immediate neighbours and
   see if any of them have already been assigned to a PixelSet. If they
   have, identify which PixelSet they are assigned to. We distinguish two
   different types of PixelSets; those which were identified at this contour
   level, and those which were identified at higher contour levels. */
                     cupidCFNebs( ipa, i, x, ndim, dims, skip, hindex,
                                  perspectrum, naxis, &n1, &il1,  i1, &n2,
                                  &il2, ret, status );

/* If none of the neighbours of this pixel are assigned to a PixelSet which
   was identified at this contour level, then we start a new PixelSet. */
                     if( n1 == 0 ) {

/* Find the index value to use. We re-use indices for any PixelSets which
   have been transferred into some other PixelSet. This keeps the size of
   the "ret" array to a minimum and prevents us exceeding the largest allowed
   index value. */
                        while( *index > hindex && !ret[ *index - 1 ] )
                                                              (*index)--;

/* Allocate memory for a new PixelSet structure and initialise it. Also, put
   the new PixelSet pointer into the relevant element of the returned array,
   extending the array if necessary. */
                        ps = cupidCFMakePS( *index, status );
                        ret = astGrow( ret, ++(*index), sizeof( CupidPixelSet * ) );
                        if( ret && ps ) {
                           ret[ ps->index ] = ps;

/* Add the current pixel to this new PixelSet. */
                           cupidCFAddPixel( ipa, ps, i, x, (double ) *pd,
                                            edge, status );
                        }

/* If one or more of the neighbours of this pixel are assigned to PixelSets
   which were identified at this contour level, then add this pixel into
   the PixelSet with the lowest index. */
                     } else {
                        ps = ret[ il1 ];
                        cupidCFAddPixel( ipa, ps, i, x, (double ) *pd, edge, status );

/* If this pixel touches other PixelSets identified at this contour level,
   then transfer the pixels contained in them all into the PixelSet with
   lowest index, and then free the memory used to hold them. */
                        if( n1 > 1 ) {
                           for( ii = 0; ii < n1; ii++ ) {
                              ops = ret[ i1[ ii ] ];
                              if( ops && ops != ps ) {
                                 cupidCFXfer( ops, ps, ipa, skip, status );
                                 ret[ i1[ ii ] ] = cupidCFFreePS( ops, NULL,
                                                                  nel, status );
                              }
                           }
                        }
                     }

/* If we are using the IDL ClumpFind algorithm (rather than the algorithm
   published in ApJ), and if the pixel adjoins a clump defined at a higher
   contour level, then note that the clump containing the new pixel adjoins
   this higher level clump. */
                     if( idl && il2 != CUPID__CFNULL ) {
                        ps->nebs = astGrow( ps->nebs, ps->nneb + 1, sizeof( int ) );
                        if( astOK ) ps->nebs[ ps->nneb++ ] = il2;
                     }

/* If the current pixel data value is good but is lower than the current
   contour level (and has so not been assigned to a clump), note the
   largest such data value. This will tell us if we can skip some of the
   following contour levels due to them being empty. */
                  } else if( *pd > *maxpd ) {
                     *maxpd = *pd;
                  }
               }
            }
         }
      }
   }

/* Now check each of the new PixelSets created above. If the last used
   index is freed, then decrement the last used index in "*index" so that we
   can re-use the index. This keeps the size of the "ret" array down. */
   total_pop = 0;
   new_clumps = 0;
   for( i = *index - 1; i >= hindex; i-- ) {
      ps = ret[ i ];
      if( ps ) {
         total_pop += ps->pop;

/* Tell the user about the new PixelSet. */
         msgSeti( "I", ps->index );
         msgSeti( "P", ps->pop );
         msgOutif( MSG__DEBUG1, "",
                   "   New PixelSet: index ^I population ^P", status );

/* If we are using the "friends-of-friends" algorithm (as described in
   the 1994 ApJ Williams et al paper) to carve up merged contours, then we
   attempt to erode the new PixelSet by transferring pixels from the PixelSet
   into adjoining PixelSets defined at a higher contour level. The loop
   continues until all pixels that adjoin another PixelSet have been
   transferred out of the new PixelSet.*/
         if( !idl ) {
            while( 1 ) {
               if( !cupidCFErode( ps, ipa, ndim, dims, skip, perspectrum,
                                  naxis, ret, status ) ) break;
            }

/* Otherwise, we use the simpler algorithm implemented in later IDL
   versions of ClumpFind. This assigns each pixel in the PixelSet to the
   adjoining clump that has the closest peak pixel. */
         } else {
            cupidCFIdl( ps, ipa, ndim, dims, skip, naxis, ret, status );
         }

/* If the PixelSet is now empty, free the resources used by the PixelSet.
   If this PixelSet is currently the last in the list, decrement the length
   of the list. */
         if( ps->pop == 0 ) {
            ret[ i ] = cupidCFFreePS( ps, NULL, nel, status );
            if( i == *index - 1 ) (*index)--;
            msgOutif( MSG__DEBUG1, "", "      Transferred to adjoining "
                    "PixelSets", status );

/* If Pixels remain in the PixelSet then it is a new clump, so tell the user
   and leave it in the returned list of clumps. */
         } else if( newok ) {
            msgSetd( "V", ps->vpeak );
            msgSeti( "C", ps->peak[ 0 ] + slbnd[ 0 ] - 1 );
            for( j = 1; j < ndim; j++ ) {
              msgSetc( "C", "," );
              msgSeti( "C", ps->peak[ j ] + slbnd[ j ] - 1 );
            }
            msgOutif( MSG__DEBUG1, "",
                      "      Retained as a new peak: pos (^C): value ^V",
                      status );

            new_clumps++;

/* If no new clumps are allowed, tell the user, and free the clump. */
         } else {
            ret[ i ] = cupidCFFreePS( ps, NULL, nel, status );
            if( i == *index - 1 ) (*index)--;
            msgOutif( MSG__DEBUG1, "", "      Ignored (no new clumps "
                      "can be started at this contour level).",
                      status );
         }

/* If a null PixelSet pointer was encountered at the end of the list,
   reduced the length of the list by 1. */
      } else if( i == *index - 1 ){
         (*index)--;
      }
   }

/* Issue summary information for this contour level. */
   msgSeti( "P", total_pop );
   msgSetc( "P", (total_pop == 1) ? " pixel" : " pixels" );
   msgSeti( "N", new_clumps );
   msgSetc( "N", (new_clumps == 1) ? " new clump" : " new clumps" );
   msgOutif( MSG__DEBUG,  "", "   ^P checked, ^N found", status );
   msgBlankif( MSG__DEBUG, status );

/* Rationalise the use of index values in order to make unused slots in
   the returned array free. First allocate an array to hold the
   translation from old index values to new. */
   new_indices = astMalloc( sizeof(int)*( *index ) );
   if( new_clumps && new_indices ) {

/* Loop over the array of clump pointers. "i" is the original index of a
   clump and "new_index" is the new index for the clump. */
      new_index = 0;
      for( i = 0; i < *index; i++ ) {

/* If this index is not used, we jump over it. */
         if( ret[ i ] ) {

/* Save the new index corresponding to the current old index. */
            new_indices[ i ] = new_index;

/* If the index value associated with the clump is about to change, tell
   the user if requested. */
            if( i != new_index ) {
              msgSeti( "I", i );
              msgSeti( "J", new_index );
              msgOutif( MSG__DEBUG1,"",
                        "   Changing index ^I to index ^J", status );

/* Change the index value stored in the PixelSet structure.*/
               ret[ i ]->index = new_index;

/* Move the PixelSet to its new position in the array of PixelSets. */
               ret[ new_index ] = ret[ i ];
               ret[ i ] = NULL;
            }

/* Indicate that the slot is now in use. */
            new_index++;
         }
      }

/* If any indices have changed, change the old index values to the new in
   the ipa array. */
      if( new_index < *index ) {
         pa = ipa;
         for( ii = 0; ii < nel; ii++, pa++ ) {
            if( *pa != CUPID__CFNULL ) *pa = new_indices[ *pa ];
         }

/* Save the new array length */
         *index = new_index;
      }
   }

/* Free resources. */
   new_indices = astFree( new_indices );

/* Return the expanded list of clumps. */
   return ret;

}
