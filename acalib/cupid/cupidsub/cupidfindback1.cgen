/* -*- C -*- */

#include "sae_par.h"
#include "cupid.h"
#include "mers.h"
#include "ndf.h"
#include <math.h>

void CGEN_FUNCTION(cupidFindback1)( float wlim, int ndim, int dim[3], int lbnd[3],
                                    int box[3], double rms, CGEN_TYPE *din,
                                    CGEN_TYPE *dout, CGEN_TYPE *wa,
                                    CGEN_TYPE *wb, int alg, int *status ){
/*
*+
*  Name:
*     cupidFindback1<X>

*  Purpose:
*     Apply spatial filtering to a 3D array in order to estimate the
*     background.

*  Language:
*     Starlink C

*  Synopsis:
*     void cupidFindback1<X>( float wlim, int ndim, int dim[3], int lbnd[3],
*                             int box[3], double rms, CGEN_TYPE *din,
*                             CGEN_TYPE *dout, CGEN_TYPE *wa, CGEN_TYPE *wb,
*                             int alg, int *status )

*  Description:
*     This function uses spatial filtering to remove features with a
*     scale size less than a specified size from a 3 dimensional array,
*     thus producing an estimate of the local background within the array.
*
*     The algorithm proceeds as follows. A filtered form of the input data
*     is first produced by replacing every input pixel by the minimum of
*     the input values within a rectangular box centred on the pixel.
*     This filtered data is then filtered again, using a filter that
*     replaces every pixel value by the maximum value in a box centred on
*     the pixel. This produces an estimate of the lower envelope of the data,
*     but usually contains unacceptable sharp edges. In addition, this
*     filtered data has a tendency to hug the lower envelope of the
*     noise, thus under-estimating the true background of the noise-free
*     data. The first problem is minimised by smoothing the background
*     estimate using a filter that replaces every pixel value by the mean
*     of the values in a box centred on the pixel. The second problem
*     is minimised by estimating the difference between the input data
*     and the background estimate within regions well removed from any
*     bright areas. This difference is then extrapolated into the bright
*     source regions and used as a correction to the background estimate.
*     Specifically, the residuals between the input data and the initial
*     background estimate are first formed, and residuals which are more
*     than three times the RMS noise are set bad. The remaining residuals
*     are smoothed with a mean filter. This smoothing will replace a lot
*     of the bad values rejected above, but may not remove them all. Any
*     remaining bad values are estimated by linear interpolation between
*     the nearest good values along the first axis. The interpolated
*     residuals are then smoothed again using amean filter, to get a
*     surface representing the bias in the initial background estimate.
*     This surface is finally added onto the initial background estimate
*     to obtain the output array.

*  Parameters:
*     wlim
*        The minimum fraction of good pixels in a filter box required for
*        a good output value. If negative, then an output pixel is bad
*        only if the input pixel is also bad.
*     ndim
*        The number of dimensions in the input NDF.
*     dim
*        The length of each pixel axis in the supplied array.
*     lbnd
*        The lower pixel bound of each pixel axis in the supplied array.
*     box
*        The dimensions of the each of the filters, in pixels.
*     rms
*        The RMS noise level in the data.
*     din
*        Pointer to the start of the supplied data array.
*     dout
*        Pointer to the start of the array to contain the fitted lower
*        envelope.
*     wa
*        Pointer to workspace with the same size as "din".
*     wb
*        Pointer to workspace with the same size as "din".
*     alg
*        Indicates which variant of the algorithm to use.
*     status
*        Pointer to the inherited status value.

*  Copyright:
*     Copyright (C) 2009 Science and Technology Facilities Council.
*     Copyright (C) 2006, 2007 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     DSB: David S. Berry
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     13-SEP-2006 (DSB):
*        Original version.
*     19-MAR-2007 (DSB):
*        Added parameter "rms".
*     14-JAN-2009 (TIMJ):
*        Use msgOutif rather than ilevel.
*     1-SEP-2009 (DSB):
*        Make dumping of debugging arrays controllable via the MSG filter
*        level rather than requiring re-compilation of cupid.
*     12-SEP-2011 (DSB):
*        Allow RMS to be calculated independently for each slice of the
*        base NDF.
*     10-JUL-2013 (DSB):
*        Added argument wlim.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables: */
   CGEN_TYPE *p1;       /* Pointer to next array element */
   CGEN_TYPE *p2;       /* Pointer to next array element */
   CGEN_TYPE *p3;       /* Pointer to next array element */
   CGEN_TYPE vl;        /* Previous good value */
   double k1;           /* Value gradient */
   int i;               /* Index of next array element */
   int il;              /* 1D vector index of previous good value */
   int irow;            /* Index of row */
   int iv;              /* 1D vector index into array */
   int ix;              /* x grid index */
   int j;               /* 1D vector index */
   int lbad;            /* Was previous pixel value bad? */
   int nel;             /* Number of elements in input array */
   int newbox[ 3 ];     /* Box size for smoothing */
   int nrow;            /* Number of rows of data */

/* Abort if an error has already occurred. */
   if( *status != SAI__OK ) return;

/* Get the number of pixels in the input array. */
   nel = dim[ 0 ]*dim[ 1 ]*dim[ 2 ];

/* If multiple slices from the user-supplied base NDF are being processed
   individually, the supplied RMS value may be bad, indicating that a default
   RMS value should be found and used independently for each slice. If so,
   find the RMS in the supplied array. */
   if( rms == VAL__BADD && *status == SAI__OK ) {
      rms = CGEN_FUNCTION(cupidRms)( din, nel, dim[ 0 ], status );

/* If the RMS was found, report it. */
      if( *status == SAI__OK && rms != CGEN_BAD ) {
         msgOutiff( MSG__VERB, "", "      Using RMS=%g.", status, rms );

/* If not annull th error, issue a warning, fill the returned array with
   bad values and exit. */
      } else {
         if( *status != SAI__OK ) errAnnul( status );
         msgOutiff( MSG__VERB, "", "      Cannot find RMS.", status );
         p3 = dout;
         for( i = 0; i < nel; i++ ) *(p3++) = CGEN_BAD;
         return;
      }
   }

/* Filter the input data by replacing each input value by the minimum
   value in a box centred on the input pixel. The filtered data goes in
   "wa". */
   msgOutif( MSG__VERB, "", "      Applying minimum filter", status );
   CGEN_FUNCTION(cupidFindback3)( wlim, dim, box, din, wa, status );

   if( msgFlevok( MSG__DEBUG, status ) ) {
      CGEN_FUNCTION(cupidDump)( wa, ndim, dim, lbnd, "min. filtered data",
                                status );
   }

/* Apply a second filter which replaces each pixel value in "wa" by the
   maximum value in a box centred on the pixel. The filtered data goes
   (temporarily) in the output array. */
   msgOutif( MSG__VERB, "", "      Applying maximum filter", status );
   CGEN_FUNCTION(cupidFindback10)( dim, box, wa, dout, status );

   if( msgFlevok( MSG__DEBUG, status ) ) {
      CGEN_FUNCTION(cupidDump)( dout, ndim, dim, lbnd, "max. filtered data",
                                status );
   }


/* We now enter a loop in which the current background estimate is
   repeatedly smoothed using a mean box filter, but using a smaller box
   each time. The smoothing will result in the smoothed background being
   over-estimated in the troughs between peaks. To eliminate this effect,
   the current background estimate is modified after each smoothing to
   become the lower of the smoothed background and the original
   background. First initialise the mean box size, then loop. */
   newbox[ 0 ] = box[ 0 ];
   newbox[ 1 ] = box[ 1 ];
   newbox[ 2 ] = box[ 2 ];
   while( 1 ){

/* Smooth the current background estimate in dout using a mean box filter,
   putting the results in "wa". */
      msgOutiff( MSG__VERB, "",
                 "      Applying mean filter (box size [^%d,^%d,%d]).", status,
                 newbox[ 0 ], newbox[ 1 ], newbox[ 2 ]);

      CGEN_FUNCTION(cupidFindback4)( dim, newbox, dout, wa, status );

      if( msgFlevok( MSG__DEBUG, status ) ) {
         CGEN_FUNCTION(cupidDump)( wa, ndim, dim, lbnd, "mean filtered data",
                                   status );
      }

/* Reduce the box size to half its previous dimensions. */
      newbox[ 0 ] = ( newbox[ 0 ] - 1 )/2 + 1;
      newbox[ 1 ] = ( newbox[ 1 ] - 1 )/2 + 1;
      newbox[ 2 ] = ( newbox[ 2 ] - 1 )/2 + 1;

/* Stop looping when all the filter box sizes are 1 (i.e. no further
   smoothing to be done), or if the original FINDBACK algorithm is
   required. */
      if( alg == 0 || (
          newbox[ 0 ] == 1 && newbox[ 1 ] == 1 && newbox[ 2 ] == 1 ) ) break;

/* Find the minimum of the original background estimate and the smoothed
   background estimate at every point and store in "dout". */
      msgOutif( MSG__VERB, "", "      Taking minimum ", status );
      p1 = dout;
      p2 = wa;
      for( i = 0; i < nel; i++,p1++,p2++ ) {
         if( *p1 != CGEN_BAD && *p2 != CGEN_BAD ) {
            if( *p2 < *p1 ) *p1 = *p2;
         }
      }

      if( msgFlevok( MSG__DEBUG, status ) ) {
         CGEN_FUNCTION(cupidDump)( dout, ndim, dim, lbnd, "minimum of original "
                                   "and smoothed background", status );
      }

   }

/* The background estimate in "wa" should now be a close fit to the lower
   envelope of the input data, but will be biassed by the noise. That is,
   it will tend to hug the lower envelope of the noise rather than the
   lower envelope of the noise-free data. To correct for this bias, we look
   at the mean residuals between the background estimate and the input
   data in background areas. First form the residuals between the input
   data and the background estimate, storing them in the output array. */
   msgOutif( MSG__VERB, "", "      Forming residuals", status );
   p1 = din;
   p2 = wa;
   p3 = dout;
   for( i = 0; i < nel; i++ ) {
      if( *p1 != CGEN_BAD && *p2 != CGEN_BAD ) {
         *(p3++) = *(p1++) - *(p2++);
      } else {
         *(p3++) = CGEN_BAD;
         p1++;
         p2++;
      }
   }

   if( msgFlevok( MSG__DEBUG, status ) ) {
      CGEN_FUNCTION(cupidDump)( dout, ndim, dim, lbnd, "initial residuals",
                                status );
   }


/* Identify background pixels and set all other pixel bad. */
   msgOutif( MSG__VERB, "", "      Removing source residuals", status );
   CGEN_FUNCTION(cupidFindback2)( rms, dim, dout, status );

   if( msgFlevok( MSG__DEBUG, status ) ) {
      CGEN_FUNCTION(cupidDump)( dout, ndim, dim, lbnd, "source-rejected "
                                "residuals", status );
   }



/* Smooth the remaining residuals with a mean filter, putting the results
   in "wb". */
   msgOutif( MSG__VERB, "", "      Smoothing background residuals", status );
   CGEN_FUNCTION(cupidFindback4)( dim, box, dout, wb, status );

   if( msgFlevok( MSG__DEBUG, status ) ) {
      CGEN_FUNCTION(cupidDump)( wb, ndim, dim, lbnd, "mean smoothed residuals",
                                status );
   }



/* Fill in rejected pixel values by interpolation between the good pixels on
   either side. For simplicity and speed, this is done independently for
   each row. */
   msgOutif( MSG__VERB, "", "      Filling in missing residuals", status );
   nrow = dim[ 1 ]*dim[ 2 ];
   vl = CGEN_BAD;
   iv = 0;
   for( irow = 0; irow < nrow; irow++ ) {
      il = iv - 1;
      lbad = 0;
      for( ix = 1; ix <= dim[ 0 ]; ix++, iv++ ) {
         if( wb[ iv ] != CGEN_BAD ) {
            if( lbad ) {
               if( vl != CGEN_BAD ){
                  k1 = ( wb[ iv ] - vl )/( iv - il );
                  for( j = il + 1; j < iv; j++ ) wb[ j ] = k1*( j - il ) + vl;
               } else {
                  k1 = wb[ iv ];
                  for( j = il + 1; j < iv; j++ ) wb[ j ] = k1;
               }
               lbad = 0;
            }
            vl = wb[ iv ];
            il = iv;
         } else {
            lbad = 1;
         }
      }

      if( lbad && vl != CGEN_BAD ) {
         for( j = il + 1; j < iv; j++ ) wb[ j ] = vl;
      }

   }

   if( msgFlevok( MSG__DEBUG, status ) ) {
      CGEN_FUNCTION(cupidDump)( wb, ndim, dim, lbnd, "filled residuals", status );
   }


/* Smooth the residuals again, putting the results in the output array. */
   msgOutif( MSG__VERB, "", "      Smoothing filled residuals", status );
   CGEN_FUNCTION(cupidFindback4)( dim, box, wb, dout, status );

   if( msgFlevok( MSG__DEBUG, status ) ) {
      CGEN_FUNCTION(cupidDump)( dout, ndim, dim, lbnd, "smoothed filled "
                                "residuals", status );
   }


/* The values in the output array now represent the bias between the input
   data and the background estimate formed above. It will be extended into
   the source regions by virture of the double smoothing and filling just
   performed. Add this correction onto the background estimate and store in
   the output. */
   msgOutif( MSG__VERB, "", "      Correcting background estimate", status );
   p1 = wa;
   p2 = din;
   p3 = dout;
   for( i = 0; i < nel; i++, p2++ ) {
      if( *p1 != CGEN_BAD && *p2 != CGEN_BAD && *p3 != CGEN_BAD ) {
         *(p3++) += *(p1++);
      } else {
         *(p3++) = CGEN_BAD;
         p1++;
      }
   }

   if( msgFlevok( MSG__DEBUG, status ) ) {
      CGEN_FUNCTION(cupidDump)( dout, ndim, dim, lbnd, "final background",
                                status );
   }


}

