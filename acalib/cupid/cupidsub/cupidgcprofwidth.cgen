#include "sae_par.h"
#include "cupid.h"
#include "math.h"

double CGEN_FUNCTION(cupidGCProfWidth)( CGEN_TYPE *array, int ndim, int *dims,
                                        int imax, int *ax_max, int ax,
                                        double rms, double fwhm, double *off,
                                        double *cen, int *status ){
/*
*+
*  Name:
*     cupidGCProfWidth<X>

*  Purpose:
*     Find the width of a clump from its radial profile.

*  Language:
*     Starlink C

*  Synopsis:
*     double cupidGCProfWidth<X>( CGEN_TYPE *array, int ndim, int *dims,
*                                 int imax, int *ax_max, int ax, double rms,
*                                 double fwhm, double *off, double *cen,
*                                 int *status )

*  Description:
*     This functions produces an initial estimate of the width and
*     background value of a Gaussian clump, along a specified pixel axis.
*     If first finds the minima on either side of the specified peak
*     position, and then find the weighted mean and standard deviation of
*     the pixel positions between these minima, using the data values as
*     weights. A sloping background is removed from the data when
*     calculating the weighted mean and standard deviation. This
*     background is a straight line between the two minima.

*  Parameters:
*     array
*        The array containing the data to be fitted. The elements should
*        be ordered according to Fortran order (first axis varying most
*        rapidly).
*     ndim
*        The number of pixel axes in the array.
*     dims
*        The number of pixels on each pixel axis of the array.
*     imax
*        The 1D vectorised index of the pixel with the highest value in
*        the array. This is used as the start position for the
*        radial profile.
*     ax_max
*        The N-d GRID coordinates corresponding to "imax".
*     ax
*        The zero-based index of the pixel axis along which the profile
*        is to be taken.
*     rms
*        The RMS noise level in the array.
*     fwhm
*        The user-supplied instrument beam width, in pixels.
*     off
*        Address of a location containing a double value to which to add
*        the estimate of the background data value (i.e. the mean of the
*        two minima). This is an absolute data value (i.e. not normalised
*        to units of "rms").
*     cen
*        A location at which to return an improved estimate of the
*        GRID coordinate of the profile peak, on axis "ax".
*        >>>>>  CURRENTLY THIS IS UNDER REVIEW. EXTRA CODE IS NEEDED TO
*        CALCULATE THIS PROPERLY, AND IT MAY NOT HAVE MUCH EFFECT <<<<<<
*     status
*        Pointer to the inherited status value.

*  Returned Value:
*     The FWHM of the profile, in pixels.

*  Notes:
*     - This function can be invoked using the generic cupidGCProfWidth macro
*     defined in cupid.h. This macro has the same parameter list as
*     cupidGCProfWidth<X> except that an extra parameter is added to the start
*     of the parameter list indicating the data type of the specific
*     cupidGCProfWidth... function to be invoked. This extra parameter should
*     be an integer and should be one of CUPID__DOUBLE, CUPID__FLOAT, etc.

*  Copyright:
*     Copyright (C) 2005 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     DSB: David S. Berry
*     {enter_new_authors_here}

*  History:
*     5-OCT-2005 (DSB):
*        Original version.
*     7-MAR-2005 (DSB):
*        Improvements to width estimation algorithm to cater for high
*        noise situations.
*     8-MAR-2005 (DSB):
*        Initilaise "hiwid" and "lowid" in case no other suitable values
*        are found.
*     12-APR-2012 (DSB):
*        Improve method for estimating FWHM.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables: */
   double hgt;           /* Height of the Gaussian above the background */
   double prev;          /* Previous data value */
   double ret;           /* Sum of weighted axis values */
   double sigma;         /* As ingle estimate of the stdnard deviation */
   double ssum;          /* Sum of all estimates of the standard deviation */
   double sum;           /* Sum of pixel values found since the last minimum */
   double v1low;         /* Lowest data value found so far */
   double v2low;         /* Lowest data value found so far */
   double v;             /* Mean value at two profile points */
   double vmax;          /* The maximum value in the clump */
   double vnorm;         /* The normalised value - 0 = background, 1 = peak */
   int i1;               /* Vector index at lower of two profile points */
   int i2;               /* Vector index at upper of two profile points */
   int j1;               /* Axis value at lower of two profile points */
   int j1low;            /* Radius at lowest pixel */
   int j2;               /* Axis value at upper of two profile points */
   int j2low;            /* Radius at lowest pixel */
   int nsum;             /* No. of pixel values summed in "sum" */
   int step;             /* Vector step between adjacent pixels on an axis */

/* Initialise */
   ret = 10;

/* Abort if an error has already occurred. */
   if( *status != SAI__OK ) return ret;

/* Save the 1D vector step between adjacent pixels on the axis. */
   if( ax == 0) {
      step = 1;

   } else if( ax == 1 ) {
      step = dims[ 0 ];

   } else {
      step = dims[ 0 ]*dims[ 1 ];

   }

/* Get the maximum value in the clump. */
   vmax = (double) array[ imax ];

/* First move out away from the peak to higher axis values, looking for a
   significant minimum in the data value along the axis. Initialise the GRID
   axis value and vector index of the current pixel to be the pixel next
   to the peak pixel. */
   j2 = ax_max[ ax ] + 1;
   i2 = imax + 1;

/* Initialise the lowest value found so far in the profile. */
   v2low = vmax;
   j2low = 0;

/* Initialise the sum of all pixel values subsequent to the most recent
   minimum value. Also set the number of values summed in "sum" to zero. */
   sum = 0.0;
   nsum = 0;

/* We have no previous value as yet. */
   prev = VAL__BADD;

/* Loop round extending the profile to larger radii until the first
   significant minimum is found in the profile. */
   while( j2 <= dims[ ax ] ) {

/* Ignore bad pixels */
      if( array[ i2 ] != CGEN_BAD ) {

/* Get the pixel value. */
         v = (double) array[ i2 ];

/* If this value is lower than the previous lowest value, but not more
   than 1.5*rms lower than the previous value, remember it. Also reset the
   values that are used to find the mean of the pixel values that follow
   this minimum. */
         if( v < v2low && prev != VAL__BADD && prev - v < 1.5*rms) {
            v2low = v;
            j2low = j2;
            sum = 0.0;
            nsum = 0;

/* Otherwise, update the sum of hte values found since the last minimum,
   and see if the mean of these values exceeds the minimum value by a
   significant amount. Here, "significant" means three times the standard
   error on the mean. We also require at least "fwhm" pixel to have been
   tested since the last minimum. If both these conditions are passed,
   accept the current lowest pixel value as the end of the clump. */
         } else {
            sum += v;
            nsum++;

            if( sum/nsum - v2low >= 3*rms/sqrt( (double) nsum ) &&
                nsum >= fwhm ) break;
         }

/* Remember the previous value. */
         prev = v;

      } else {
         prev = VAL__BADD;
      }

/* Increment the GRID axis value and vector index of the current pixel. */
      j2++;
      i2 += step;
   }

/* The lowest pixel value will underestimate the background. Add on the
   noise level to provide some correction for this. */
   v2low += rms;

/* Do the same working downwards from the peak to lower axis values. */
   j1 = ax_max[ ax ] - 1;
   i1 = imax - 1;

   v1low = vmax;
   j1low = 0;

   sum = 0.0;
   nsum = 0;

   prev = VAL__BADD;

   while( j1 > 0 ) {

      if( array[ i1 ] != CGEN_BAD ) {
         v = (double) array[ i1 ];

         if( v < v1low && prev != VAL__BADD && prev - v < 1.5*rms) {
            v1low = v;
            j1low = j1;
            sum = 0.0;
            nsum = 0;

         } else {
            sum += v;
            nsum++;

            if( sum/nsum - v1low >= 3*rms/sqrt( (double) nsum ) &&
                nsum >= fwhm ) break;
         }

         prev = v;

      } else {
         prev = VAL__BADD;
      }

      j1--;
      i1 -= step;
   }

   v1low += rms;

/* Increment the sum of the offsets using the lower of the two minimum
   values. */
   if( v1low < v2low ) {
      *off += v1low + rms;
   } else {
      *off += v2low + rms;
   }

/* Return the supplied central position. */
   *cen = ax_max[ ax ];

/* We form the FWHM estimate from the side of th peak which goes down to
   lower values (the other side may be polluted by an adjancet source).
   First handle cases where the high side goes down to lower data values... */
   if( v2low < v1low ) {

/* Establish a default value for the returned FWHM in case no better
   value can be found. */
      ret = ( j2low - ax_max[ ax ] )/2;

/* We form an estimate of the standard deviation of the Gaussian from each
   point in a set of points about half way from the peak to the minimum of
   the profile. The returned FWHM is derived from the mean of these
   standard deviations. First zero the running sums used to find the mean. */
      ssum = 0.0;
      nsum = 0;

/* Get the height of the Gaussian above the background (v2low). */
      hgt = vmax - v2low;

/* Set the initial axis value at the peak and the correspoinding vector index. */
      j2 = ax_max[ ax ] + 1;
      i2 = imax + 1;

/* Loop round all samples. */
      while( j2 <= j2low ) {

/* Get the data value at this sample, and check it is good. */
         v = (double) array[ i2 ];
         if( v != CGEN_BAD  ) {

/* Get the height of the data value above the background normalised to
   the amplitude of the peak. */
            vnorm = ( v - v2low )/hgt;

/* Only use samples in the middle portion of the Gauusoan - the ends are
   subject to high errors. */
            if( vnorm > 0.25 && vnorm < 0.75 ) {

/* For an estimate of the standard deviation from the current value and
   axis offset. */
               sigma = ( ax_max[ ax ] - j2 ) / log( vnorm );

/* Increment the running sums. */
               ssum += sigma;
               nsum++;
            }
         }

/* Prepare for the next sample. */
         j2++;
         i2 += step;
      }


/* Now handle cases where the low side goes down to lower data values. Do
   exactly the same, but reversed...  */
   } else {
      ret = ( ax_max[ ax ] - j1low )/2;
      ssum = 0.0;
      nsum = 0;

      hgt = vmax - v1low;

      j1 = ax_max[ ax ] - 1;
      i1 = imax -1;

      while( j1 >= j1low ) {
         v = (double) array[ i1 ];
         if( v != CGEN_BAD  ) {
            vnorm = ( v - v1low )/hgt;
            if( vnorm > 0.25 && vnorm < 0.75 ) {
               sigma = ( j1 - ax_max[ ax ] ) / log( vnorm );
               ssum += sigma;
               nsum++;
            }
         }
         j1--;
         i1 -= step;
      }
   }

/* Find the mean standard deviation and convert to an FWHM. If no better
   value is found, use the default value established above. */
   if( nsum > 0 ) ret = 1.665*( ssum/nsum );

/* Return the result. */
   return ret;

}
