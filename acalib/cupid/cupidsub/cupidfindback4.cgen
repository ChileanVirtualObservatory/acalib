#include "sae_par.h"
#include "ast.h"
#include "cupid.h"
#include <string.h>

/* A structure used to describe a filter box. The "slabs" refered to are
   the single pixel thick slabs forming the 6 faces of the 3D filter box. */
typedef struct CGEN_FUNCTION(MeanFilterBox) {
   int lbndxu[ 3 ];    /* Lower grid index bounds of upper x slab */
   int ubndxu[ 3 ];    /* Upper grid index bounds of upper x slab */
   int lbndyu[ 3 ];    /* Lower grid index bounds of upper y slab */
   int ubndyu[ 3 ];    /* Upper grid index bounds of upper y slab */
   int lbndzu[ 3 ];    /* Lower grid index bounds of upper z slab */
   int ubndzu[ 3 ];    /* Upper grid index bounds of upper z slab */
   int lbndxl[ 3 ];    /* Lower grid index bounds of lower x slab */
   int ubndxl[ 3 ];    /* Upper grid index bounds of lower x slab */
   int lbndyl[ 3 ];    /* Lower grid index bounds of lower y slab */
   int ubndyl[ 3 ];    /* Upper grid index bounds of lower y slab */
   int lbndzl[ 3 ];    /* Lower grid index bounds of lower z slab */
   int ubndzl[ 3 ];    /* Upper grid index bounds of lower z slab */
   CGEN_TYPE total;    /* Sum of all good data values in box */
   int ngood;          /* Number of good data values in box */
} CGEN_FUNCTION(MeanFilterBox);


CGEN_TYPE *CGEN_FUNCTION(cupidFindback4)( int dim[3], int box[3],
                                          CGEN_TYPE *din, CGEN_TYPE *dout,
                                          int *status ){
/*
*+
*  Name:
*     cupidFindback4<X>

*  Purpose:
*     Apply a mean box filter to a supplied array.

*  Language:
*     Starlink C

*  Synopsis:
*     CGEN_TYPE *cupidFindback4<X>( int dim[3], int box[3],
*                                   CGEN_TYPE *din, CGEN_TYPE *dout,
*                                   int *status )

*  Description:
*     This function smooths the supplied array with a filter that
*     replaces every input pixel with the mean of the good input pixels
*     within a box of specified size centred on the pixel being replaced.

*     Note, this filter function is different ot the min and max filters
*     in that as the filter box approaches the edges ofhte array, it shrinks
*     in size in order to kepp it symetric about the output pixel. Without
*     this, an output value close to the array edge is biassed towards
*     the values that are further away from the edge. The min and max
*     filters use a constant width filter, even at the edges, because the
*     min-max filter technique requires it.

*  Parameters:
*     dim
*        The length of each pixel axis in the supplied array.
*     box
*        The dimensions of the the box filter, in pixels.
*     din
*        Pointer to the start of the supplied data array.
*     dout
*        Pointer to the start of the output data array. May be NULL, in
*        which case a new array will be allocated, and a pointer returned
*        as the function value. Note, the "din" value should not be
*        supplied for "dout" (i.e. the input array cannot also be used as
*        the output array).
*     status
*        Pointer to the inherited status value.

*  Returned Value:
*     A pointer to a (possibly new) array holding the smoothed output
*     values.

*  Copyright:
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     DSB: David S. Berry
*     {enter_new_authors_here}

*  History:
*     13-SEP-2006 (DSB):
*        Original version.
*     14-SEP-2007 (DSB):
*        Modified heavily to avoid edge effects. The filter box now shrinks
*        as it approaches any edge of the array in order to ensure that the
*        filter box is centred on the output pixel.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables: */
   CGEN_FUNCTION(MeanFilterBox) *zbox; /* Structure describing z axis filter box */
   CGEN_FUNCTION(MeanFilterBox) *xbox; /* Structure describing x axis filter box */
   CGEN_FUNCTION(MeanFilterBox) *ybox; /* Structure describing y axis filter box */
   CGEN_TYPE *p;               /* Pointer to next returned pixel */
   CGEN_TYPE *result;          /* Returned array */
   CGEN_TYPE val;              /* Input pixel value */
   CupidBoxIter *iter;         /* Structure for iterating round pixels */
   int bk1;                    /* Half the x box width */
   int bk2;                    /* Half the y box width */
   int bk3;                    /* Half the z box width */
   int iihi;                   /* Upper bound of new box */
   int iilo;                   /* Lower bound of new box */
   int iv;                     /* 1D vector index of current pixel */
   int ix;                     /* X axis grid index for current output pixel */
   int ixhi;                   /* ix value at which box starts to shrink */
   int ixlo;                   /* ix value at which box stops expanding */
   int iy;                     /* Y axis grid index for current output pixel */
   int iyhi;                   /* iy value at which box starts to shrink */
   int iylo;                   /* iy value at which box stops expanding */
   int iz;                     /* Z axis grid index for current output pixel */
   int izhi;                   /* iz value at which box starts to shrink */
   int izlo;                   /* iz value at which box stops expanding */
   int nel;                    /* Number of pixel in supplied array */
   int xx[ 3 ];                /* Grid indices of current pixel */

/* Abort if an error has already occurred. */
   if( *status != SAI__OK ) return NULL;

/* Form useful constants. */
   bk1 = box[ 0 ]/2;
   bk2 = box[ 1 ]/2;
   bk3 = box[ 2 ]/2;
   ixhi = dim[ 0 ] - bk1;
   iyhi = dim[ 1 ] - bk2;
   izhi = dim[ 2 ] - bk3;
   ixlo = bk1 + 1;
   iylo = bk2 + 1;
   izlo = bk3 + 1;

/* Indicate we do not yet have a CupidBoxIter structure. */
   iter = NULL;

/* Allocate the memory for the output array if needed. */
   if( !dout ) {
      nel = dim[ 0 ]*dim[ 1 ]*dim[ 2 ];
      result = astMalloc( sizeof( CGEN_TYPE )*nel );
   } else {
      result = dout;
   }

/* Create a MeanFilterBox structure to describe a filter box that progress
   up the Z axis at (x=0,y=0). */
   zbox = astMalloc( sizeof( CGEN_FUNCTION(MeanFilterBox) ) );

/* Create a MeanFilterBox structure to describe a filter box that progress
   up the Y axis at (x=0). */
   ybox = astMalloc( sizeof( CGEN_FUNCTION(MeanFilterBox) ) );

/* Create a MeanFilterBox structure to describe a filter box that progress
   up the X axis. */
   xbox = astMalloc( sizeof( CGEN_FUNCTION(MeanFilterBox) ) );

/* Check the pointers can be used safely. */
   if( xbox ) {

/* The box is initialially centred at (1,1,1). In order to eensure that
   the box is symetric about its centre, we give the box and initial
   width of 1 pixel on all 3 axes. The box expands in size as it enters the
   array such that it always has an equal number of pixels on either side
   of the box centre, until it reaches its maximum size as specified by
   "box". The box shrinks again when it reaches the other side of the array
   until it reaches zero size as the centre of the box passes outside the
   array. All this is done to ensure that the filtered value is not
   biased by the fact that the box is not symetric about its centre near
   the edges of the array. Initialise the bounds of the slab of pixels
   forming the ZY face at the upper bound on the X axis. */
      zbox->lbndxu[ 0 ] = 0;
      zbox->lbndxu[ 1 ] = 1;
      zbox->lbndxu[ 2 ] = 1;
      zbox->ubndxu[ 0 ] = 1;
      zbox->ubndxu[ 1 ] = 1;
      zbox->ubndxu[ 2 ] = 1;

/* Likewise initalise the bounds of the slab of pixels forming the ZY face at
   the lower bound on the X axis. */
      zbox->lbndxl[ 0 ] = 1;
      zbox->lbndxl[ 1 ] = 1;
      zbox->lbndxl[ 2 ] = 1;
      zbox->ubndxl[ 0 ] = 1 - ixlo;
      zbox->ubndxl[ 1 ] = 1;
      zbox->ubndxl[ 2 ] = 1;

/* Likewise initalise the bounds of the slab of pixels forming the XZ face at
   the upper bound on the Y axis. */
      zbox->lbndyu[ 0 ] = 1;
      zbox->lbndyu[ 1 ] = 0;
      zbox->lbndyu[ 2 ] = 1;
      zbox->ubndyu[ 0 ] = 1;
      zbox->ubndyu[ 1 ] = 1;
      zbox->ubndyu[ 2 ] = 1;

/* Likewise initalise the bounds of the slab of pixels forming the XZ face at
   the lower bound on the Y axis. */
      zbox->lbndyl[ 0 ] = 1;
      zbox->lbndyl[ 1 ] = 1;
      zbox->lbndyl[ 2 ] = 1;
      zbox->ubndyl[ 0 ] = 1;
      zbox->ubndyl[ 1 ] = 1 - iylo;
      zbox->ubndyl[ 2 ] = 1;

/* Likewise initalise the bounds of the slab of pixels forming the XY face at
   the upper bound on the Z axis. */
      zbox->lbndzu[ 0 ] = 1;
      zbox->lbndzu[ 1 ] = 1;
      zbox->lbndzu[ 2 ] = 0;
      zbox->ubndzu[ 0 ] = 1;
      zbox->ubndzu[ 1 ] = 1;
      zbox->ubndzu[ 2 ] = 1;

/* Initalise the bounds of the slab of pixels forming the XY face at
   the lower bound on the Z axis. */
      zbox->lbndzl[ 0 ] = 1;
      zbox->lbndzl[ 1 ] = 1;
      zbox->lbndzl[ 2 ] = 1;
      zbox->ubndzl[ 0 ] = 1;
      zbox->ubndzl[ 1 ] = 1;
      zbox->ubndzl[ 2 ] = 1 - izlo;

/* The total good data sum in the initial Z filter box is just the
   value of the first pixel in the array, if good. */
      val = din[ 0 ];
      if( val != CGEN_BAD ) {
         zbox->total = val;
         zbox->ngood = 1;
      } else {
         zbox->total = 0.0;
         zbox->ngood = 0;
      }

/* Store a pointer to the next output pixel to be assigned a value. */
      p = result;

/* Now loop through all the xy planes in the cube. */
      iz = 1;
      while( 1 ) {

/* Initialise the Y filter box for this xy plane to be a copy of the z
   filter box. */
         memcpy( ybox, zbox, sizeof( CGEN_FUNCTION(MeanFilterBox) ) );

/* Now loop through the rows in this xy plane. */
         iy = 1;
         while( 1 ){

/* Initialise the x box  to be a copy of the modified y box. */
            memcpy( xbox, ybox, sizeof( CGEN_FUNCTION(MeanFilterBox) ) );

/* Now loop through the pixels in this new x row. */
            ix = 1;
            while( 1 ) {

/* Store the outpout value (the mean of the good values in the filter box). */
               if( xbox->ngood > 0 ) {
                  *(p++) = xbox->total/xbox->ngood;
               } else {
                  *(p++) = CGEN_BAD;
               }

/* We now move the centre of the x filter box up the x axis by 1 pixel. */
               if( ++ix > dim[ 0 ] ) break;

/* This involves deciding which new pixels are to be added into the x box
   (the pixels in the "upper slab") and which are to be removed (the
   "lower slab"). First deal with cases where the x box has not yet entered
   fully into the array. */
               if( ix <= ixlo ) {

/* The total x width of the box is increased by 2 pixels for each new "ix"
   value as the box enters the array. This is done so that the extent of
   the box can remain centred on the "ix" value. The lower x limit of the
   box stays fixed at 1, and the upper x limit is increased by 2. The slab
   forming the YZ surface at the upper x bound of the box contains the
   new pixels that will be added to the box. This is therefore 2 pixels
   wide (in the x direction) during this phase of the passage of the box
   up the x axis, and is incremented by 2 for each new "ix" value. */
                  xbox->lbndxu[ 0 ] += 2;
                  xbox->ubndxu[ 0 ] += 2;

/* Since the box has not yet entered fully into the array, there are as yet
   no pixels to be removed from the box. Therefore, the slab forming the YZ
   surface at the lower x bound of the box contains zero pixels. The bounds
   of this slab were initialised so that, if we increment the upper bound of
   the slab, the lower bound will remain greater than the upper bounds until
   the box has enetered fully into the array. */
                  xbox->ubndxl[ 0 ]++;

/* Now deal with cases where the x box has entered fully into the array
   and has not yet started to leave the array. */
               } else if( ix <= ixhi ) {

/* The bounds of both slabs are just incremented by 1 pixel along the x
   axis. So a slab 1 pixel wide in the x direction will be added into the
   box, and a slab 1 pixel wide be removed from the box. */
                  xbox->lbndxu[ 0 ] = ( ++xbox->ubndxu[ 0 ] );
                  xbox->lbndxl[ 0 ] = ( ++xbox->ubndxl[ 0 ] );

/* Finally deal with cases where the x box has started to leave the array. */
               } else {

/* The total x width of the box is decreased by 2 pixels for each new "ix"
   value as the box leaves the array. This is done so that the extent of
   the box can remain centred on the "ix" value. The upper x limit of the
   box stays fixed at "dim[0]", and the lower x limit is increased by 2. The
   slab forming the YZ surface at the lower x bound of the box contains the
   old pixels that will be removed from the box. This is therefore 2 pixels
   wide (in the x direction) during this phase of the passage of the box
   up the x axis, and is incremented by 2 for each new "ix" value. */
                  xbox->ubndxl[ 0 ] += 2;
                  xbox->lbndxl[ 0 ] = ( xbox->ubndxl[ 0 ] - 1 );

/* Since the box has reached the end of the array, there are no more new
   pixels to be added into the box. Therefore, the slab forming the YZ
   surface at the upper x bound of the box contains zero pixels. This is
   arranged by incrementing the lower bounds of the slab, but not the
   upper bounds, resulting in the lower bound being greater than the upper
   bounds of the array. */
                  xbox->lbndxu[ 0 ]++;
               }

/* Loop through the pixels in the upper slab, adding the good pixel values
   into the filter box. */
               iter = cupidBoxIterator( iter, dim, xbox->lbndxu, xbox->ubndxu,
                                        1, status );
               while( cupidNextIt( iter, xx, &iv, status ) ) {
                  val = din[ iv ];
                  if( val != CGEN_BAD ) {
                     xbox->total += val;
                     xbox->ngood++;
                  }
               }

/* Loop through the pixels in the lower slab, removing the good pixel values
   from the filter box. */
               iter = cupidBoxIterator( iter, dim, xbox->lbndxl, xbox->ubndxl,
                                        1, status );
               while( cupidNextIt( iter, xx, &iv, status ) ) {
                  val = din[ iv ];
                  if( val != CGEN_BAD ) {
                     xbox->total -= val;
                     xbox->ngood--;
                  }
               }
            }

/* We now move the centre of the Y filter box up the Y axis by 1 pixel. */
            if( ++iy > dim[ 1 ] ) break;

/* This involves deciding which new pixels are to be added into the y box
   (the pixels in the "upper slab") and which are to be removed (the
   "lower slab"). First deal with cases where the y box has not yet entered
   fully into the array. */
            if( iy <= iylo ) {

/* The total Y width of the box is increased by 2 pixels for each new "iy"
   value as the box enters the array. This is done so that the extent of
   the box can remain centred on the "iy" value. The lower Y limit of the
   box stays fixed at 1, and the upper Y limit is increased by 2. The slab
   forming the XZ surface at the upper Y bound of the box contains the
   new pixels that will be added to the box. This is therefore 2 pixels
   wide (in the Y direction) during this phase of the passage of the box
   up the Y axis, and is incremented by 2 for each new "iy" value. */
               ybox->lbndyu[ 1 ] += 2;
               ybox->ubndyu[ 1 ] += 2;

/* Since the box has not yet entered fully into the array, there are as yet
   no pixels to be removed from the box. Therefore, the slab forming the XZ
   surface at the lower Y bound of the box contains zero pixels. The bounds
   of this slab were initialised so that, if we increment the upper bound of
   the slab, the lower bound will remain greater than the upper bounds until
   the box has enetered fully into the array. */
               ybox->ubndyl[ 1 ]++;

/* Also note the upper and lower grid index bounds of the next Y box. */
               iilo = 1;
               iihi = ybox->ubndyu[ 1 ];

/* Now deal with cases where the y box has entered fully into the array
   and has not yet started to leave the array. */
            } else if( iy <= iyhi ) {

/* The bounds of both slabs are just incremented by 1 pixel along the Y
   axis. So a slab 1 pixel wide in the Y direction will be added into the
   box, and a slab 1 pixel wide be removed from the box. */
               ybox->lbndyu[ 1 ] = ( ++ybox->ubndyu[ 1 ] );
               ybox->lbndyl[ 1 ] = ( ++ybox->ubndyl[ 1 ] );

/* Also note the upper and lower grid index bounds of the next Y box. */
               iilo = ybox->ubndyl[ 1 ] + 1;
               iihi = ybox->ubndyu[ 1 ];

/* Finally deal with cases where the y box has started to leave the array. */
            } else {

/* The total Y width of the box is decreased by 2 pixels for each new "iy"
   value as the box leaves the array. This is done so that the extent of
   the box can remain centred on the "iy" value. The upper Y limit of the
   box stays fixed at "dim[1]", and the lower Y limit is increased by 2. The
   slab forming the XZ surface at the lower Y bound of the box contains the
   old pixels that will be removed from the box. This is therefore 2 pixels
   wide (in the Y direction) during this phase of the passage of the box
   up the Y axis, and is incremented by 2 for each new "iy" value. */
               ybox->ubndyl[ 1 ] += 2;
               ybox->lbndyl[ 1 ] = ( ybox->ubndyl[ 1 ] - 1 );

/* Since the box has reached the end of the array, there are no more new
   pixels to be added into the box. Therefore, the slab forming the XZ
   surface at the upper Y bound of the box contains zero pixels. This is
   arranged by incrementing the lower bounds of the slab, but not the
   upper bounds, resulting in the lower bound being greater than the upper
   bounds of the array. */
               ybox->lbndyu[ 1 ]++;

/* Also note the upper and lower grid index bounds of the next Y box. */
               iilo = ybox->ubndyl[ 1 ] + 1;
               iihi = dim[ 1 ];
            }

/* Loop through the pixels in the upper slab, adding the good pixel values
   into the filter box. */
            iter = cupidBoxIterator( iter, dim, ybox->lbndyu, ybox->ubndyu,
                                     1, status );
            while( cupidNextIt( iter, xx, &iv, status ) ) {
               val = din[ iv ];
               if( val != CGEN_BAD ) {
                  ybox->total += val;
                  ybox->ngood++;
               }
            }

/* Loop through the pixels in the lower slab, removing the good pixel values
   from the filter box. */
            iter = cupidBoxIterator( iter, dim, ybox->lbndyl, ybox->ubndyl,
                                     1, status );
            while( cupidNextIt( iter, xx, &iv, status ) ) {
               val = din[ iv ];
               if( val != CGEN_BAD ) {
                  ybox->total -= val;
                  ybox->ngood--;
               }
            }

/* Modify the y value of the other bounds (not used above but used
   on the next pass through the ix loop). */
            ybox->lbndxu[ 1 ] = iilo;
            ybox->ubndxu[ 1 ] = iihi;
            ybox->lbndxl[ 1 ] = iilo;
            ybox->ubndxl[ 1 ] = iihi;
         }

/* We now move the centre of the Z filter box up the Z axis by 1 pixel. */
         if( ++iz > dim[ 2 ] ) break;

/* This involves deciding which new pixels are to be added into the z box
   (the pixels in the "upper slab") and which are to be removed (the
   "lower slab"). First deal with cases where the z box has not yet entered
   fully into the array. */
         if( iz <= izlo ) {

/* The total Z width of the box is increased by 2 pixels for each new "iz"
   value as the box enters the array. This is done so that the extent of
   the box can remain centred on the "iz" value. The lower Z limit of the
   box stays fixed at 1, and the upper Z limit is increased by 2. The slab
   forming the XY surface at the upper Z bound of the box contains the
   new pixels that will be added to the box. This is therefore 2 pixels
   wide (in the Z direction) during this phase of the passage of the box
   up the Z axis, and is incremented by 2 for each new "iz" value. */
            zbox->lbndzu[ 2 ] += 2;
            zbox->ubndzu[ 2 ] += 2;

/* Since the box has not yet entered fully into the array, there are as yet
   no pixels to be removed from the box. Therefore, the slab forming the XY
   surface at the lower Z bound of the box contains zero pixels. The bounds
   of this slab were initialised so that, if we increment the upper bound of
   the slab, the lower bound will remain greater than the upper bounds until
   the box has enetered fully into the array. */
            zbox->ubndzl[ 2 ]++;

/* Also note the upper and lower grid index bounds of the next Z box. */
            iilo = 1;
            iihi = zbox->ubndzu[ 2 ];

/* Now deal with cases where the z box has entered fully into the array
   and has not yet started to leave the array. */
         } else if( iz <= izhi ) {

/* The bounds of both slabs are just incremented by 1 pixel along the Z
   axis. So a slab 1 pixel wide in the Z direction will be added into the
   box, and a slab 1 pixel wide be removed from the box. */
            zbox->lbndzu[ 2 ] = ( ++zbox->ubndzu[ 2 ] );
            zbox->lbndzl[ 2 ] = ( ++zbox->ubndzl[ 2 ] );

/* Also note the upper and lower grid index bounds of the next Z box. */
            iilo = zbox->ubndzl[ 2 ] + 1;
            iihi = zbox->ubndzu[ 2 ];

/* Finally deal with cases where the z box has started to leave the array. */
         } else {

/* The total Z width of the box is decreased by 2 pixels for each new "iz"
   value as the box leaves the array. This is done so that the extent of
   the box can remain centred on the "iz" value. The upper Z limit of the
   box stays fixed at "dim[2]", and the lower Z limit is increased by 2. The
   slab forming the XY surface at the lower Z bound of the box contains the
   old pixels that will be removed from the box. This is therefore 2 pixels
   wide (in the Z direction) during this phase of the passage of the box
   up the Z axis, and is incremented by 2 for each new "iz" value. */
            zbox->ubndzl[ 2 ] += 2;
            zbox->lbndzl[ 2 ] = ( zbox->ubndzl[ 2 ] - 1 );

/* Since the box has reached the end of the array, there are no more new
   pixels to be added into the box. Therefore, the slab forming the XY
   surface at the upper Z bound of the box contains zero pixels. This is
   arranged by incrementing the lower bounds of the slab, but not the
   upper bouds, resulting in the lower bound being greater than the upper
   bounds of the array. */
            zbox->lbndzu[ 2 ]++;

/* Also note the upper and lower grid index bounds of the next Z box. */
            iilo = zbox->ubndzl[ 2 ] + 1;
            iihi = dim[ 2 ];
         }

/* Loop through the pixels in the upper slab, adding the good pixel values
   into the filter box. */
         iter = cupidBoxIterator( iter, dim, zbox->lbndzu, zbox->ubndzu,
                                  1, status );
         while( cupidNextIt( iter, xx, &iv, status ) ) {
            val = din[ iv ];
            if( val != CGEN_BAD ) {
               zbox->total += val;
               zbox->ngood++;
            }
         }

/* Loop through the pixels in the lower slab, removing the good pixel values
   from the filter box. */
         iter = cupidBoxIterator( iter, dim, zbox->lbndzl, zbox->ubndzl,
                                  1, status );
         while( cupidNextIt( iter, xx, &iv, status ) ) {
            val = din[ iv ];
            if( val != CGEN_BAD ) {
               zbox->total -= val;
               zbox->ngood--;
            }
         }

/* Modify the z value of the other bounds (not used above but used
   on the hext pass through the ix and iy loops). */
         zbox->lbndxu[ 2 ] = iilo;
         zbox->ubndxu[ 2 ] = iihi;
         zbox->lbndyu[ 2 ] = iilo;
         zbox->ubndyu[ 2 ] = iihi;
         zbox->lbndxl[ 2 ] = iilo;
         zbox->ubndxl[ 2 ] = iihi;
         zbox->lbndyl[ 2 ] = iilo;
         zbox->ubndyl[ 2 ] = iihi;
      }
   }

/* Free resources. */
   xbox = astFree( xbox );
   ybox = astFree( ybox );
   zbox = astFree( zbox );
   iter = astFree( iter );

/* Return the result. */
   return result;

}
