#include "sae_par.h"
#include "cupid.h"
#include "ast.h"
#include "mers.h"
#include <string.h>
#include <math.h>

int CGEN_FUNCTION(cupidFWMain)( CGEN_TYPE *array, int nel, int ndim,
                                int dims[ 3 ], int skip[ 3 ], int slbnd[ 3 ],
                                double rms, AstKeyMap *config, int *ipa,
                                int perspectrum, int *status ){
/*
*+
*  Name:
*     cupidFWMain<X>

*  Purpose:
*     Assign a clumpindex to every data pixel.

*  Language:
*     Starlink C

*  Synopsis:
*     int cupidFWMain<X>( CGEN_TYPE *array, int nel, int ndim, int dims[ 3 ],
*                         int skip[ 3 ], int slbnd[ 3 ], double rms,
*                         AstKeyMap *config, int *ipa,
*                         int perspectrum, int *status )

*  Description:
*     This function decide which clump each data pixel belongs to and fills
*     an array with the index of the clump to which each pixel belongs. The
*     algorithm loops over every data pixel above a nominated threshold level
*     which has not already been assigned to a clump. For each such pixel, a
*     route to the nearest peak in the data value is found by moving from
*     pixel to pixel along the line of greatest gradient. When this route
*     arrives at a peak (i.e. a local maximum), all pixels within some
*     small neighbourhood are checked to see if there is a higher data value.
*     If there is, the route recommences from the highest pixel in the
*     neighbourhood, again moving up the line of greatest gradient. When a
*     peak is reached which is the highest data value within its
*     neighbourhood, a check is made to see if this peak pixel has already
*     been assigned to a clump. If it has, then all pixels which were
*     traversed in following the route to this peak are assigned to that same
*     clump. If the peak has not yet been assigned to a clump, then it, and
*     all the traversed pixels, are assigned to a new clump. If the route
*     commences at "sea level" and starts with a low gradient section (average
*     gradient lower than a given value) then the initial section of the route
*     (up to the point where the gradient exceeds the low gradient limit) is
*     not assigned to the clump, but is instead flag as "unusable" to prevent
*     other routes using them.

*  Parameters:
*     array
*        The array containing the data to be scanned. The elements should
*        be ordered according to Fortran order (first axis varying most
*        rapidly).
*     nel
*        The number of elements in "array".
*     ndim
*        The number of significant pixel axes.
*     dims
*        The number of pixels on each pixel axis of the array.
*     skip
*        The increment in 1D vector index required to move a distance of 1
*        pixel along each axis. This allows conversion between indexing
*        the array using a single 1D vector index and using nD coords. This
*        array should have 3 elements even if "ndim" is less than 3, and
*        the extra elements should be filled with zero's.
*     slbnd
*        The lower pixel index bounds of the input array.
*     rms
*        The RMS noise in the data
*     config
*        An AstKeyMap contining the configuration parameters for this
*        algorithm.
*     ipa
*        Pointer to the array to receive the index of the clump to which
*        each data pixel is assigned. The lowest clump index is 0. Pixels
*        not in a clump are assigned -1.
*     perspectrum
*        If non-zero, then each spectrum is processed independently of its
*        neighbours. A clump that extends across several spectra will be
*        split into multiple clumps, each restricted to a single spectrum.
*        The non-zero value supplied should be the 1-based axis index of
*        the spectral pixel axis. Should be supplied as zero if "ndim" is
*        not 3.
*     status
*        Pointer to the inherited status value.

*  Returned Value:
*     The largest clump index stored in "ipa" on return.

*  Notes:
*     - This function can be invoked using the generic cupidFWMain macro
*     defined in cupid.h. This macro has the same parameter list as
*     cupidFWMain<X> except that an extra parameter is added to the start
*     of the parameter list indicating the data type of the specific
*     cupidFWMain... function to be invoked. This extra parameter should
*     be an integer and should be one of CUPID__DOUBLE, CUPID__FLOAT, etc.

*  Copyright:
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     Copyright (C) 2007, 2009 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     DSB: David S. Berry
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     1-FEB-2006 (DSB):
*        Original version.
*     21-MAR-2007 (DSB):
*        - Improve cleaning of initial mask for 1 and 2 D cases
*        - Extend diagnostic facilities.
*     17-SEP-2007 (DSB):
*        Added "perspectrum" parameter.
*     21-SEP-2007 (DSB):
*        Move clump merging so that it happens before the clump cleaning.
*     14-JAN-2009 (TIMJ):
*        Use MERS for message filtering.
*        Fix debugging messages when 2d image is processed.
*     22-OCT-2009 (DSB):
*        Do explicit bounds checking when scanning the 3x3x3
*        neighbourhood box, rather than just marking the edge pixels bad.
*        This avoid the output mask having a border of bad pixels.
*     22-NOV-2013 (DSB):
*        - Correct calculation of gradient in coastal region (divide by 3, not 4).
*        - Change handlign of flatslope - a walk is now deemed to leave the
*        coastal region when 1) the gradient increases above flatslope, or
*        2) the altitude increases above "noise + 2*rms".
*     11-FEB-2014 (DSB):
*        - Produce more diagnostic information at debug level 3.
*        - Add facility to dump the clump assignment array after a nominated
*        peak is first reached or after a walk from a nominated starting
*        pixel has been completed. These are specified via new configuration
*        parameters DUMPPEAK and DUMPWALK.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables: */
   CGEN_TYPE *pd;  /* Pointer to next "array" value */
   double flat[ 3 ];/* Array containing most recent data values along route */
   double flat_slope;/* Lowest gradient which marks the start of the walk */
   double frac;    /* Min fraction of neighbouring good pixels */
   double g;       /* Gradient from central pixel to neighbouring pixel */
   double h;       /* Pixel data value (i.e. "height" of a pixel) */
   double maxg;    /* Maximum gradient found so far */
   double noise;   /* Data value at which each route commences */
   double sea_level;/* Data values less than this are at "sea level" */
   int *m1;        /* Pointer to input array */
   int *m2;        /* Pointer to output array */
   int *m3;        /* Pointer used to swap arrays */
   int *pa;        /* Pointer to next "ipa" value */
   int *route;     /* Array holding vector indices of traversed pixels */
   int *work;      /* Work array */
   int cleaniter;  /* Number of cleaning  iterations to perform */
   int clump_index;/* Index of the peak to which the walk ascends */
   int count;      /* Number of pixels checked */
   int debug3;     /* Are we displaying level 3 debug info? */
   int dump_peak;  /* The clump index at which to dump the clump assignment array */
   int dump_walk;  /* The starting pixel at which to dump the clump assignment array */
   int got_flat;   /* Has the length of the initial flat section been found? */
   int iflat;      /* Index of next element in "flat" to be written or read */
   int iix;        /* GRID index on 1st axis at central pixel */
   int iiy;        /* GRID index on 2nd axis at central pixel */
   int iiz;        /* GRID index on 3rd axis at central pixel */
   int istep;      /* Index within "route" array */
   int iter;       /* Iteration count */
   int iv;         /* 1D Vector index of current central pixel. */
   int iv0;        /* 1D Vector index of starting pixel. */
   int ix;         /* GRID index on 1st axis at starting pixel */
   int ixoff;      /* Offset in GRID index on 1st axis */
   int iy;         /* GRID index on 2nd axis at starting pixel */
   int iyoff;      /* Offset in GRID index on 2nd axis */
   int iz;         /* GRID index on 3rd axis at starting pixel */
   int izoff;      /* Offset in GRID index on 3rd axis */
   int jvx;        /* Vector index at start of z plane */
   int jvy;        /* Vector index at start of y column */
   int jvz;        /* Vector index at start of x row */
   int jx;         /* X plane count */
   int jxhi;       /* Highest value for axis 1 within extended neighbourhood */
   int jxlo;       /* Lowest value for axis 1 within extended neighbourhood */
   int jy;         /* Y plane count */
   int jyhi;       /* Highest value for axis 1 within extended neighbourhood */
   int jylo;       /* Lowest value for axis 1 within extended neighbourhood */
   int jz;         /* Z plane count */
   int jzhi;       /* Highest value for axis 1 within extended neighbourhood */
   int jzlo;       /* Lowest value for axis 1 within extended neighbourhood */
   int lpercent;   /* Previous displayed percent value */
   int maxjump;    /* Longest jump to a higher neighbouring pixel */
   int mix;        /* Grid index on 1st axis of 3x3x3 pixel being tested */
   int miy;        /* Grid index on 2nd axis of 3x3x3 pixel being tested */
   int miz;        /* Grid index on 3rd axis of 3x3x3 pixel being tested */
   int new_peak;   /* Has this walk arrived at a new peak? */
   int nflat;      /* Number of starting pixels in "route" which are flat */
   int nix;        /* GRID index on 1st axis at central pixel */
   int niy;        /* GRID index on 2nd axis at central pixel */
   int niz;        /* GRID index on 3rd axis at central pixel */
   int nsx;        /* Longest jump between peaks in the x direction */
   int nsy;        /* Longest jump between peaks in the y direction */
   int nsz;        /* Longest jump between peaks in the z direction */
   int nv;         /* Vector index of next pixel along the route */
   int nzero;      /* No. of axes with zero displacement between pixels */
   int percent;    /* Percent of pixels done */
   int ret;        /* The highest index value in "ipa" */
   int route_length;/* Number of pixels stored in "route" array */
   int skip0;      /* Total skip from centre to first 3x3x3 neighbour */
   int skip1;      /* Total skip from centre to first extended neighbour */
   int xlim;       /* Number of x planes in 3x3x3 neighbourhood */
   int ylim;       /* Number of y planes in 3x3x3 neighbourhood */
   int yon;        /* Is the current Y row within the bounds of the array? */
   int zlim;       /* Number of z planes in 3x3x3 neighbourhood */
   int zon;        /* Is the current Z plane within the bounds of the array? */

/* The distance from a central pixel centre to the centre of a neighbouring
   pixel, indexed by the number of axes (0, 1, 2 or 3) on which the two
   pixels have zero displacement  (sqrt(3), sqrt(2), sqrt(1), 0). */
   static double dist[ 4 ] = { 1.7320508, 1.4142136, 1.0, 0.0 };

/* Initialise */
   ret = 0;

/* For speed, get a local flag indicating if we are displaying level
   3 debugging info. */
   debug3 = msgFlevok( MSG__DEBUG2, status );

/* See if the user wants to dump the clump assignment array after a
   specified peak is reached for the first time. The supplied value is
   the clump index. */
   dump_peak = cupidConfigI( config, "DUMPPEAK", 0, status );

/* See if the user wants to dump the clump assignment array after the
   walk from a specified pixel has been completed. The supplied value is
   the zero-based vector index of the start pixel. */
   dump_walk = cupidConfigI( config, "DUMPWALK", -1, status );

/* Abort if an error has already occurred. */
   if( *status != SAI__OK ) return ret;

/* Get the lowest data value to be considered. */
   noise = cupidConfigRMS( config, "NOISE", rms, 2.0*rms, status );

/* Get the largest jump (in pixels) which can be made from a local maximum
   to a higher maximum in the neighbourhood of the first maximum. */
   maxjump = cupidConfigI( config, "MAXJUMP", 4, status );

/* Get the difference in data value between adjacent pixels which marks
   the start of a walk. Any initial section of the walk which has an
   average gradient (measured over 4 steps) less than this value is not
   assigned to any clump. */
   flat_slope = cupidConfigRMS( config, "FLATSLOPE", rms, rms, status );

/* Walks which start at low level are ignored until they achieve the
   gradient specified by FLATSLOPE. Walks which start at high level are
   used in their entirety. Store the data value which marks the break
   between high and low level. */
   sea_level = noise + 2*rms;

/* Fill the supplied "ipa" array with -1 for all pixels which are below the
   threshold, or are bad. Fill all other pixels with zero to indicate that
   the pixel is "usable but not yet checked". */
   pa = ipa;
   pd = array;
   for( iz = 1; iz <= dims[ 2 ]; iz++ ) {
      for( iy = 1; iy <= dims[ 1 ]; iy++ ) {
         for( ix = 1; ix <= dims[ 0 ]; ix++, pa++, pd++ ) {
            if( *pd == CGEN_BAD ){
               *pa = -1;

            } else if( *pd <= noise ){
               *pa = -1;

            } else {
               *pa = 0;
            }
         }
      }
   }

/* If required, dump the mask indicating which pixel are below the threshold. */
   //if( msgFlevok( MSG__DEBUG2, status ) ) {
   //   cupidDumpI( ipa, ndim, dims, slbnd, "initial mask", status );
   //}

/* Use a cellular automata to remove small isolated groups of usable
   pixels from the above "ipa" array. This allocates new memory for the
   cleaned up array. */
   msgOutif( MSG__VERB, "", "Removing isolated pixels\n", status );

   if( ndim == 1 ) {
      frac = 0.5;
   } else if( ndim == 2 ) {
      frac = 0.25;
   } else {
      frac = 0.1;
   }

   work = cupidRCA( ipa, NULL, nel, dims, skip, frac, VAL__MAXI, 0, -1, 1, status );

/* If required, dump the mask resulting from the above cleaning. */
   //if( msgFlevok( MSG__DEBUG2, status ) ) {
   //   cupidDumpI( work, ndim, dims, slbnd, "cleaned initial mask", status );
   //}

/* Pre-allocate some memory for the route array which holds the 1D vector
   indices of the pixels traversed in the route from the initial pixel to
   the clump peak. */
   route = astMalloc( sizeof( *route )*100 );
   if( route ) {

/* Prepare progress report. */
      msgOutif( MSG__VERB, "", "Walking...\n", status );
      count = 0;

/* Store some useful constants. */
      if( perspectrum == 1 ) {
         skip0 = skip[ 0 ];
      } else if( perspectrum == 2 ) {
         skip0 = skip[ 1 ];
      } else if( perspectrum == 3 ) {
         skip0 = skip[ 2 ];
      } else {
         skip0 = skip[ 0 ] + skip[ 1 ] + skip[ 2 ];
      }

      skip1 = maxjump*skip0;

      if( perspectrum == 1 ) {
         xlim = 3;
         ylim = 0;
         zlim = 0;
         nsx = maxjump;
         nsy = 0;
         nsz = 0;

      } else if( perspectrum == 2 ) {
         xlim = 0;
         ylim = 3;
         zlim = 0;
         nsx = 0;
         nsy = maxjump;
         nsz = 0;

      } else if( perspectrum == 3 ) {
         xlim = 0;
         ylim = 0;
         zlim = 3;
         nsx = 0;
         nsy = 0;
         nsz = maxjump;

      } else {
         xlim = 3;
         ylim = ( ndim > 1 ) ? 3 : 1;
         zlim = ( ndim > 2 ) ? 3 : 1;
         nsx = maxjump;
         nsy = ( ndim > 1 ) ? maxjump : 0;
         nsz = ( ndim > 2 ) ? maxjump : 0;
      }

      lpercent = 0;

/* Scan through the "work" array, looking for usable pixels which have not
   yet been assigned to a clump (i.e. have a value of zero in "work"). */
      pa = work;
      for( iz = 1; iz <= dims[ 2 ]; iz++ ) {
         for( iy = 1; iy <= dims[ 1 ]; iy++ ) {
            for( ix = 1; ix <= dims[ 0 ]; ix++, pa++ ) {
               if( *pa == 0 ) {

/* Indicate we have not yet arrived at a new peak on this walk. */
                  new_peak = 0;

/* Indicate we have not yet assertained which clump this pixel belongs to. */
                  clump_index = -1;

/* Save the vector index of this pixel. This is modified as we walk up hill,
   so that it always refers to the current position of the "walker". The
   variables iix, iiy and iiz are likewise modified to represent the grid
   coords of the pixel with vector index "iv". */
                  iv0 = iv = pa - work;
                  iix = ix;
                  iiy = iy;
                  iiz = iz;

/* We now start walking away from this pixel up hill (up the steepest
   gradient). We store the vector index of all pixels visited on this walk
   in the route array. Put the current pixel in it and initialise its length
   to one, and then loop until we have reached the peak. Whilst walking, we
   initially keep a record of the average gradient over the last 4 steps.
   We count how many steps we travel before we encounter an average gradient
   above the gradient limit. However, this initial flat section is only
   ignored if the walk starts from "sea level". Walks which start at a
   higher altitude are used in their entirety. */
                  route[ 0 ] = iv;
                  route_length = 1;

                  nflat = 0;
                  iflat = 0;

                  got_flat = ( (double) array[ iv ] > sea_level );

                  while( clump_index == -1 ) {

/* Note the data value at the current central position. */
                     h = (double) array[ iv ];

/* If we have not yet determined the length of the initial section of the
   route which is below the gradient limit, check the current average
   gradient (taken over the previous 4 steps). We skip this section once
   we have found the first "steep" section in the route. */
                     if( !got_flat ) {

/* Find the average gradient, if possible, over the last 4 steps, assuming
   each step is the same length. If it is above the user-supplied limit,
   indicate we have got the length of the initial flat section of the
   route. */
                        if( h > sea_level ) {
                           got_flat = 1;

                        } else if( route_length > 3 ) {
                           if( ( h -  flat[ iflat ] )/3 > flat_slope ) {
                              got_flat = 1;

/* Otherwise, increment the number of steps in the intial flat section. */
                           } else {
                              nflat = route_length;
                           }
                        }

/* Record the current data value in an array so that it will be available to
   calculate the average gradient 4 steps later. Values are stored cyclicly
   in this array. */
                        flat[ iflat++ ] = h;
                        if( iflat == 3 ) iflat = 0;
                     }

/* We will now examine the 3x3x3 cube of neighbouring pixels to determine
   where we step to next. We will choose the neighbour with the greatest
   gradient. Initialise the maximum gradient found so far to a large -ve
   value. */
                     maxg = VAL__MIND;

/* Calculating the gradient to each of the neighbouring pixel centres
   requires the distance between the cell centres. This will be either 1,
   sqrt(2) or sqrt(3) pixels, and can be determined from the number of axes
   (0, 1, 2 or 3) on which the neighbouring pixel has zero displacement from
   the central test pixel. "nzero" counts the number of such axes. */
                     nzero = perspectrum ? 2 : 3 - ndim;

/* Check the 3x3x3 cube of neighbouring pixels, and determine the one
   with the highest gradient. We check them in "fortran order". Initialise
   the grid indices at the first ("bottom left") pixel of the 3x3x3 cube. */
                     ixoff = iix - xlim/2;
                     iyoff = iiy - ylim/2;
                     izoff = iiz - zlim/2;

/* Initialise the grid coords and vector index of the pixel with the
   highest gradient. */
                     nix = 0;
                     niy = 0;
                     niz = 0;
                     nv = 0;

/* Initialise the vector index of the first pixel in the box. **/
                     jvz = iv - skip0;

/* Initialise the grid index on the 3rd axis of the first pixel. */
                     miz = izoff;

/* Loop round all Z planes in the 3x3x3 cube, updating the Z grid index
   of the pixel being tested (miz) on each pass. */
                     for( jz = 0; jz < zlim; jz++,miz++ ) {

/* Determine if the current Z plane is within the bounds of the data
   array. */
                        zon = ( miz >= 1 && miz <= dims[ 2 ] );

/* Initialise the vector index, and the grid index on the 2nd axis, of the
   first pixel in the current Z plane. Then loop round all Y rows in the
   current Z plane. */
                        jvy = jvz;
                        miy = iyoff;
                        for( jy = 0; jy < ylim; jy++,miy++ ) {

/* Determine if the current Y row is within the bounds of the data
   array. */
                           yon = zon && ( miy >= 1 && miy <= dims[ 1 ] );

/* Initialise the vector index, and the grid index on the 1st, of the
   first column in the current Y row. Then loop round all X columns in the
   current Y row. */
                           jvx = jvy;
                           mix = ixoff;
                           for( jx = 0; jx < xlim; jx++,mix++ ) {

/* Ignore pixels that are not within the bounds of the data array. */
                              if( yon && mix >= 1 && mix <= dims[ 0 ] ) {

/* Ignore unusable pixels but not pixels which have already been assigned
   to another clump. Also skip the central pixel (for which nzero is 3).
   Find the gradient to this neighbour. If it is the largest found so far,
   record its vector index and GRID coords. */
                                 if( work[ jvx ] >= 0 && nzero < 3 ) {
                                    g = ( (double) array[ jvx ] - h )/dist[ nzero ];
                                    if( g > maxg ) {
                                       maxg = g;
                                       nv = jvx;

                                       nix = mix;
                                       niy = miy;
                                       niz = miz;

                                    }
                                 }
                              }

/* Move on to consider the next neighbour, and update the number of axes
   which have zero displacement from the current pixel to the central pixel. */
                              jvx++;
                              if( jx == 0 ) {
                                 nzero++;
                              } else if( jx == 1 ){
                                 nzero--;
                              }

                           }
                           jvy += skip[ 1 ];

                           if( jy == 0 ) {
                              nzero++;
                           } else if( jy == 1 ){
                              nzero--;
                           }

                        }
                        jvz += skip[ 2 ];

                        if( jz == 0 ) {
                           nzero++;
                        } else if( jz == 1 ){
                           nzero--;
                        }

                     }

/* If there is no upward route from the current pixel, (i.e. if it is a
   local maximum), we check the slightly more extended neighbourhood for
   a higher pixel. We do this because a local maximum could be just a
   noise spike. */
                     if( maxg <= 0 ) {

                        msgSeti( "P", iix + slbnd[ 0 ] - 1 );
                        if( ndim > 1 ) {
                          msgSetc( "P", "," );
                          msgSeti( "P", iiy + slbnd[ 1 ] - 1  );
                          if( ndim > 2 ) {
                            msgSetc( "P", "," );
                            msgSeti( "P", iiz + slbnd[ 2 ] - 1 );
                          }
                        }
                        msgOutif( MSG__DEBUG1, "",
                                  "    Local max found at (^P)", status );

                        jzlo = iiz - nsz;
                        jzhi = iiz + nsz;
                        jylo = iiy - nsy;
                        jyhi = iiy + nsy;
                        jxlo = iix - nsx;
                        jxhi = iix + nsx;

                        h = VAL__MIND;
                        jvz = iv - skip1;
                        for( jz = jzlo; jz <= jzhi; jz++ ) {
                           if( jz >= 1 && jz <= dims[ 2 ] ) {

                              jvy = jvz;
                              for( jy = jylo; jy <= jyhi; jy++ ) {
                                 if( jy >= 1 && jy <= dims[ 1 ] ) {

                                    jvx = jvy;
                                    for( jx = jxlo; jx <= jxhi; jx++ ) {
                                       if( jx >= 1 && jx <= dims[ 0 ] ) {


/* Ignore unusable pixels (but not pixels which have already been
   assigned to another clump). If it is the highest found so far, record
   it. */
                                          if( work[ jvx ] >= 0 ) {
                                             if( (double) array[ jvx ] > h ) {
                                                h = (double) array[ jvx ];
                                                nv = jvx;
                                                iix = jx;
                                                iiy = jy;
                                                iiz = jz;
                                             }
                                          }
                                       }

/* Move on to consider the next pixel in the neighbourhood. */
                                       jvx++;
                                    }
                                 }
                                 jvy += skip[ 1 ];
                              }
                           }
                           jvz += skip[ 2 ];
                        }

/* Tell the user if we are jumping to a near-by pixel and continuing to
   walk up hill. */
                        if( iv != nv ) {
                          msgSeti( "P", iix + slbnd[ 0 ] - 1 );
                          if( ndim > 1 ) {
                            msgSetc( "P", "," );
                            msgSeti( "P", iiy + slbnd[ 1 ] - 1 );
                            if( ndim > 2 ) {
                              msgSetc( "P", "," );
                              msgSeti( "P", iiz + slbnd[ 2 ] - 1 );
                            }
                          }
                          msgOutif( MSG__DEBUG1, "",
                                    "      (jumping to (^P))", status );
                        }

                     } else{
                        iix = nix;
                        iiy = niy;
                        iiz = niz;
                     }

/* If the central pixel is the highest pixel in the more extended
   neighbourhood, we have reached a peak. If this peak has not already
   been assigned to a clump, increment the number of clumps and assign it
   the new clump index. If the entire walk is coastal, we do not assign a
   clump index to the walk. */
                     if( iv == nv ) {
                        if( nflat >= 0 && nflat < route_length ) {
                           clump_index = work[ iv ];
                           if( clump_index < 1 ) {
                              clump_index = ++ret;
                              new_peak = 1;
                           }

/* Report new peak. */
                           msgSeti( "I", clump_index );
                           msgSetr( "V", (float) array[ iv ] );
                           msgOutif( MSG__DEBUG,"",
                                     "      (a new peak, index = ^I, value=^V)",
                                     status );
                           if( debug3 ) msgOutf( "", "    Walk from pixel %d "
                                      "terminates at this peak", status, iv0 );

/* Assign a special value to "clump_index" that indicates that no clump
   was assigned to the current walk. */
                        } else {
                           clump_index = -2;
                           if( debug3 ) msgOutf( "", "    Walk from pixel %d "
                                              "terminates at a low-land pixel",
                                              status, iv0 );
                        }

/* Otherwise, if the next pixel on the route is already assigned to a
   clump, we now know what peak we are heading towards so use that clump
   index for the route so far, and abandon the rest of the walk. */
                     } else if( work[ nv ] > 0 ) {
                        clump_index = work[ nv ];
                        if( debug3 ) msgOutf( "", "    Walk from pixel %d "
                                              "met clump %d after %d steps.",
                                              status, iv0, clump_index,
                                              route_length );

/* Otherwise, move to the next pixel on the route. */
                     } else {

/* Add the vector index of the next pixel to the route array, extending
   the array as necessary. */
                        iv = nv;
                        istep = route_length++;
                        route = astGrow( route, route_length, sizeof( int ) );
                        if( route ) route[ istep ] = iv;
                     }
                  }

/* The walk has now finished because we have either reached a peak which
   is the highest point in its neighbourhood, or we have joined an earlier
   route and thus know which peak we would get to if we were to carry on.
   We now assign the clump index found above to all the pixels visited on
   the route, except for any low gradient section at the start of the route,
   which is set unusable (-1). We ignore walks that were entirely on the
   coastal plain (indicated by a value of -2 for clump_index). */
                  for( istep = 0; istep < route_length;istep++ ) {
                     if( istep < nflat || clump_index < 0 ) {
                        work[ route[ istep ] ] = -1;
                     } else {
                        work[ route[ istep ] ] = clump_index;
                     }
                  }

/* If this is the clump specified by config parameter DUMP_PEAK, and the
   current path is the first path to reach the peak, dump the clump
   assignment array. */
                  //if( new_peak && clump_index == dump_peak ) {
                  //   char text[200];
                  //   sprintf( text, "first walk to peak %d", dump_peak );
                  //   cupidDumpI( work, ndim, dims, slbnd, text, status );

/* Otherwise, if this is the walk specified by config parameter DUMP_WALK,
   dump the clump assignment array. */
                  //} else if( iv0 == dump_walk ) {
                  //   char text[200];
                  //   sprintf( text, "walk from pixel %d", dump_walk );
                  //   cupidDumpI( work, ndim, dims, slbnd, text, status );
                  //}
               }

/* Issue a progress report if required.*/
               if( ++count % 100000 == 0 && nel - count > 100000 ) {
                 msgBlankif( MSG__DEBUG, status );
                 percent = (int)(100*(float)count/(float)nel);
                 if( percent > lpercent ) {
                   msgSeti( "F", percent );
                   msgOutif( MSG__VERB, "", "  ^F % done", status );
                   lpercent = percent;
                 }
               }
            }
         }
      }
   }

/* Report completion of walk. */
   msgBlankif( MSG__VERB, status );
   msgOutif( MSG__VERB, "", "  100 % done", status );
   msgBlankif( MSG__VERB, status );

/* If required, dump the unmerged clump mask. */
   //if( msgFlevok( MSG__DEBUG2, status ) ) {
   //   cupidDumpI( work, ndim, dims, slbnd, "raw clump mask", status );
   //}

/* Amalgamate adjoining clumps if there is no significant dip between the
   clumps. */
   msgOutif( MSG__VERB, "", "Merging adjoining clumps", status );
   CGEN_FUNCTION(cupidFWJoin)( array, nel, ndim, dims, skip, rms, config,
                               work, &ret, perspectrum, status );
   msgOutif( MSG__VERB, "", "Merging completed", status );

/* If required, dump the merged clump mask. */
   //if( msgFlevok( MSG__DEBUG2, status ) ) {
   //   cupidDumpI( work, ndim, dims, slbnd, "merged but uncleaned clump mask",
   //               status );
   //}

/* Smooth the boundaries between the clumps. This cellular automata replaces
   each output pixels by the most commonly occuring value within a 3x3x3
   cube of input pixels centred on the output pixel. Repeat this process
   a number of times as given by configuration parameter CleanIter. */
   if( ! perspectrum ) {
      cleaniter = cupidConfigI( config, "CLEANITER", 1, status );
   } else {
      cleaniter = 0;
   }

   msgOutif( MSG__VERB, "", "Cleaning clumps", status );
   m1 = work;
   m2 = ipa;
   for( iter = 0; iter < cleaniter; iter++ ) {
      (void) cupidRCA2( m1, m2, nel, dims, skip, status );
      m3 = m1;
      m1 = m2;
      m2 = m3;
      msgSeti( "I", iter + 1 );
      msgSeti( "J", cleaniter );
      msgOutif( MSG__VERB, "",
                "Completed cleaning iteration ^I of ^J", status );
   }

/* If the final results are not now in the "ipa" array, copy them to the
   "ipa" array. */
   if( m1 != ipa ) memcpy( ipa, work, sizeof( int )*nel );

/* If required, dump the cleaned clump mask. */
   //if( msgFlevok( MSG__DEBUG2, status ) ) {
   //   cupidDumpI( ipa, ndim, dims, slbnd, "cleaned clump mask", status );
   //}

/* Free resources. */
   work = astFree( work );
   route = astFree( route );

/* Return the highest clump index in "ipa". */
   return ret;

}


