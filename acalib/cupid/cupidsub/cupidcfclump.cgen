#include "sae_par.h"
#include "cupid.h"
#include "ast.h"
#include "mers.h"

void CGEN_FUNCTION(cupidCFClump)( CGEN_TYPE *ipd, double *ipv, int *ipa,
                                 double rms, int velax, int nel, int ndim,
                                 int dims[3], int skip[3], int *slbnd,
                                 CupidPixelSet *ps, int *list_size,
                                 double **mlist, int **plist,
                                 int *status ){
/*
*+
*  Name:
*     cupidCFClump<X>

*  Purpose:
*     Gather the information needed to produce an HDS clump structure.

*  Language:
*     Starlink C

*  Synopsis:
*     void cupidCFClump<X>( CGEN_TYPE *ipd, double *ipv, int *ipa, double rms,
*                           int velax, int nel, int ndim, int dims[3],
*                           int skip[3], int *slbnd, CupidPixelSet *ps,
*                           int *list_size, double **mlist, int **plist,
*                           int *status )

*  Description:
*     This function gathers the information needed to produce an HDS clump
*     structure from a PixelSet describing a clump.

*  Parameters:
*     ipd
*        Pointer to the start of the supplied data array.
*     ipa
*        Pointer to the start of the array holding the integer index
*        (if any) associated with each pixel in the data array. This
*        shows which clump each pixel belongs to (each clump is identified
*        by a unique integer index). The array should be the same shape and
*        size as the data array. Pixels which have not yet been assigned
*        to a clump are marked with the integer value CUPID__CFNULL.
*     nel
*        The total number of elements in the data array.
*     ndim
*        The number of pixel axes in the data array.
*     dims
*        The number of pixels on each pixel axis of the data array. This
*        array should have 3 elements even if "ndim" is less than 3, and
*        the extra elements should be filled with 1's.
*     skip
*        The increment in 1D vector index required to move a distance of 1
*        pixel along each axis. This allows conversion between indexing
*        the array using a single 1D vector index and using nD coords. This
*        array should have 3 elements even if "ndim" is less than 3, and
*        the extra elements should be filled with zero's.
*     slbnd
*        Pointer to an array holding the lower pixel index bound of the
*        data array on each axis.
*     ps
*        Pointer to the PixelSet from which an HDS clump is to be created.
*     list_size
*        A location in which to return the number of pixels described n
*        the the "mlist" and "plist" arrays.
*     mlist
*        A location at which to return a pointer to a dynamically
*        allocated array holding the clump data value at each pixel in
*        the clump. If this is not NULL on entry, then the memory located
*        will be re-used.
*     plist
*        A location at which to return a pointer to a dynamically allocated
*        array holding the grid coords at each pixel in the clump. If this is
*        not NULL on entry, then the memory located will be re-used. The
*        grid coords of each pixel are stored in "ndim" consecutive elements
*        of this array.
*     status
*        Pointer to the inherited status value.

*  Notes:
*     - This function can be invoked using the generic cupidCFClump macro
*     defined in cupid.h. This macro has the same parameter list as
*     cupidCFClump<X> except that an extra parameter is added to the start
*     of the parameter list indicating the data type of the specific
*     cupidCFClump... function to be invoked. This extra parameter should
*     be an integer and should be one of CUPID__DOUBLE, CUPID__FLOAT, etc.

*  Copyright:
*     Copyright (C) 2005 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     DSB: David S. Berry
*     {enter_new_authors_here}

*  History:
*     5-DEC-2005 (DSB):
*        Original version.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables: */

   double *pm;      /* Pointer to next value in "mlist" */
   double d;        /* Pixel value */
   double vmin;     /* Minimum value in the clump */
   int *pp;         /* Pointer to next value in "plist" */
   int *v1;         /* Pointer to element at start of this row */
   int *v2;         /* Pointer to element at start of this plane */
   int *v;          /* Pointer to next array element */
   int bel;         /* No. of elements in PixelSet bounding box */
   int i;           /* GRID axis 1 value of next array element */
   int index;       /* Index value of the supplied PixelSet */
   int j;           /* GRID axis 2 value of next array element */
   int k;           /* GRID axis 3 value of next array element */

/* Initialise */
   *list_size = 0;

/* Abort if an error has already occurred. */
   if( *status != SAI__OK ) return;

/* Note the index value used to identify pixels within the PixelSet.*/
   index = ps->index;

/* Get the number of pixels in the bounding box of the PixelSet. */
   bel = ( ps->ubnd[ 0 ] - ps->lbnd[ 0 ] + 1 )*
         ( ps->ubnd[ 1 ] - ps->lbnd[ 1 ] + 1 )*
         ( ps->ubnd[ 2 ] - ps->lbnd[ 2 ] + 1 );

/* Allocate memory for the returned arrays. Ensure the arrays are the
   largest possible size needed. */
   *mlist = astGrow( *mlist, bel, sizeof( double ) );
   *plist = astGrow( *plist, bel*ndim, sizeof( int ) );
   if( *plist ) {

/* Get a pointer to the assignment value of the first pixel in the PixelSet
   bounding box. If the data  has less than 3 axes, the unused upper and
   lower bounds will be set to [1,1] and so we can always pretend there are
   3 axes. */
      v = ipa + ( ps->lbnd[ 0 ] - 1 ) + ( ps->lbnd[ 1 ] - 1 )*skip[ 1 ] +
                ( ps->lbnd[ 2 ] - 1 )*skip[ 2 ];

/* Pointers to the next elements in *mlist and *plist. */
      pm = *mlist;
      pp = *plist;

/* Minimise the minimum data value found in the clump. */
      vmin = VAL__MAXD;

/* Loop round the pixels in the PixelSet bounding box. */
      for( k = ps->lbnd[ 2 ]; k <= ps->ubnd[ 2 ]; k++ ) {
         v2 = v;
         for( j = ps->lbnd[ 1 ]; j <= ps->ubnd[ 1 ]; j++ ) {
            v1 = v;
            for( i = ps->lbnd[ 0 ]; i <= ps->ubnd[ 0 ]; i++ ) {

/* If this pixel is in the PixelSet, store its value and grid coords
   within the returned lists. */
               if( *v == index ) {
                  d = ipd[ v - ipa ];
                  *(pm++) = d;
                  *(pp++) = i;
                  if( ndim > 1 ) {
                     *(pp++) = j;
                     if( ndim > 2 ) *(pp++) = k;
                  }

/* Increment the list size. */
                  (*list_size)++;

/* Update the minimum value in the clump. */
                  if( d < vmin ) vmin = d;
               }

/* Get the pointer to the next pixel in the PixelSet bounding box. */
               v++;
            }
            v = v1 + skip[ 1 ];
         }
         v = v2 + skip[ 2 ];
      }
   }
}
