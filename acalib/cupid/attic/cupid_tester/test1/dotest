#!/bin/tcsh
#
#  Test Description:
#     GaussClumps: 1D data containing a few well separated gaussians with 
#     high noise.
#
#  Test Notes:
#     - The high noise level means that the highest pixel value can be some 
#     way from the real clump peak. The default values of 1.0 for "sa" and 
#     "sc" prevent the fitted peak from moving far from the actual peak value
#     (the default values are high in order to prevent overlapping gaussians 
#     being fitted as a single Gaussian). The lower values used in this test 
#     for "sa" and "sc" improve the fitted peak position. Using values of 
#     zero for "sa" and "sc" produced better fits, but this would be no good 
#     for data with overlapping Gaussians.


rm testout.sdf testout.FIT dotest.fail >& /dev/null

$CUPID_DIR/findclumps in="testdata" \
                      out=testout \
                      method=gaussclumps \
                      config='"sa=0.1,sc=0.1"' \
                      deconv=no \
                      outcat=testout.FIT \
                      repconf=no \
                      ilevel=0 \
                      accept

$KAPPA_DIR/sub testout testmodel diff
$KAPPA_DIR/stats diff > /dev/null

set wantsum=-36.4288777709007
set wantmin=-1.67177844047546
set wantmax=0.739926815032959
set wantsigma=0.223978479465678
set wantngood=1001
set wantnclump=4

set got=`$KAPPA_DIR/parget total stats`
set err=`$KAPPA_DIR/calc "'qif(2*abs(pa-pb)/abs(pa+pb)>0.001,1,0)'" pa=$got pb=$wantsum`
if( "$err" == "1" ) then
   echo "   Sum is $got, should be $wantsum"
   touch dotest.fail
endif


set got=`$KAPPA_DIR/parget minimum stats`
set err=`$KAPPA_DIR/calc "'qif(2*abs(pa-pb)/abs(pa+pb)>0.001,1,0)'" pa=$got pb=$wantmin`
if( "$err" == "1" ) then
   echo "   Min is $got, should be $wantmin"
   touch dotest.fail
endif

set got=`$KAPPA_DIR/parget maximum stats`
set err=`$KAPPA_DIR/calc "'qif(2*abs(pa-pb)/abs(pa+pb)>0.001,1,0)'" pa=$got pb=$wantmax`
if( "$err" == "1" ) then
   echo "   Max is $got, should be $wantmax"
   touch dotest.fail
endif

set got=`$KAPPA_DIR/parget sigma stats`
set err=`$KAPPA_DIR/calc "'qif(2*abs(pa-pb)/abs(pa+pb)>0.001,1,0)'" pa=$got pb=$wantsigma`
if( "$err" == "1" ) then
   echo "   Sigma is $got, should be $wantsigma"
   touch dotest.fail
endif

set got=`$KAPPA_DIR/parget numgood stats`
set err=`$KAPPA_DIR/calc "'qif(2*abs(pa-pb)/abs(pa+pb)>0.001,1,0)'" pa=$got pb=$wantngood`
if( "$err" == "1" ) then
   echo "   NGood is $got, should be $wantngood"
   touch dotest.fail
endif


$CURSA_DIR/catheader testout.FIT > /dev/null
set nrow=`$KAPPA_DIR/parget ROWS catheader`
if( "$nrow" != "$wantnclump" ) then
   echo "   NClump is $nrow, should be $wantnclump"
   touch dotest.fail
endif


rm diff.sdf testout.sdf testout.FIT

